#bot/handlers/admin.py

from aiogram import F, Router, types
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from firebase_admin import db
from utils.admin_notify import notify_admin_new_booking
from keyboards.inline import confirm_button
import aiohttp
import pytz
from datetime import datetime, timedelta
import asyncio
import pandas as pd
import tempfile
import httpx
from config import API_URL, ADMINS

router = Router()

admin_menu = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="üßæ –ó–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")],
    [KeyboardButton(text="üìã –í—Å–µ –±—Ä–æ–Ω–∏"), KeyboardButton(text="‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ –±—Ä–æ–Ω–∏")],
    [KeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
    [KeyboardButton(text="üìä Excel –æ—Ç—á—ë—Ç")],
    [KeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –æ—Ç–º–µ–Ω—ã")],
    [KeyboardButton(text="üóÇ –ü—Ä–æ—á–µ–µ")],  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
], resize_keyboard=True)

PLACE_ADDRESSES = {
    "1": "–ü—Ä-—Ç –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π 85",
    "2": "–ü—Ä-—Ç –î–∑–µ—Ä–∂–∏–Ω—Å–∫–æ–≥–æ 9"
}

async def cleanup_old_cancelled_reservations():
    """–£–¥–∞–ª—è–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ —Å—Ç–∞—Ä—à–µ 3 –¥–Ω–µ–π"""
    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(f"{API_URL}/cleanup_cancelled")
            return response.json()
    except Exception as e:
        print(f"Cleanup error: {e}")
        return False

async def get_reservations_list():
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π"""
    async with httpx.AsyncClient() as client:
        response = await client.get(f"{API_URL}/get_reservations")
        reservations_response = response.json()
        
        if isinstance(reservations_response, dict):
            return list(reservations_response.values())
        elif isinstance(reservations_response, list):
            return reservations_response
        else:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è—Ö")

@router.message(Command("admin"))
async def admin_panel(msg: types.Message):
    if msg.from_user.id not in ADMINS:
        await msg.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    await msg.answer("üîê –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=admin_menu)

@router.message(F.text.lower() == "üßæ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")
async def pending_reservations(msg: types.Message):
    if msg.from_user.id not in ADMINS:
        await msg.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    try:
        loading_msg = await msg.answer("‚è≥ –ò—â—É –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏...")

        reservations = await get_reservations_list()

        # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
        pending_reservations = []
        for res in reservations:
            if isinstance(res, dict):
                confirmed = res.get("confirmed", False)
                cancelled = res.get("cancelled", False)
                status = res.get("status", "")
                
                # –ó–∞—è–≤–∫–∞ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –µ—Å–ª–∏ –ù–ï –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –ò –ù–ï –æ—Ç–º–µ–Ω–µ–Ω–∞
                if not confirmed and not cancelled and status != "cancelled":
                    pending_reservations.append(res)

        await loading_msg.delete()

        if not pending_reservations:
            await msg.answer("‚úÖ –ù–µ—Ç –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫")
            return

        for res in pending_reservations:
            date = res.get('date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
            time = res.get('time', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            duration = res.get('duration', 1)
            name = res.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            phone = res.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')
            place = res.get('place', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º place –µ—Å–ª–∏ —ç—Ç–æ ID
            if str(place) in PLACE_ADDRESSES:
                place = PLACE_ADDRESSES[str(place)]
            
            text = (
                f"üìÖ {date} ‚è∞ {time} ({duration} —á)\n"
                f"üë§ {name} | üìû {phone}\n"
                f"üìç {place}"
            )
            
            kb = InlineKeyboardBuilder()
            kb.button(
                text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                callback_data=f"approve_{res['user_id']}_{res['date']}_{res['time']}"
            )
            kb.button(
                text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                callback_data=f"cancel_{res['user_id']}_{res['date']}_{res['time']}"
            )
            kb.adjust(2)
            await msg.answer(text, reply_markup=kb.as_markup())

        await msg.answer(f"üîç –í—Å–µ–≥–æ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫: {len(pending_reservations)}")

    except Exception as e:
        await msg.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞—è–≤–æ–∫")
        print(f"Pending reservations error: {e}")
        import traceback
        traceback.print_exc()

@router.message(F.text.lower() == "üìà —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def statistics(msg: types.Message):
    if msg.from_user.id not in ADMINS:
        return

    try:
        message = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è:\n\n"

        reservations = await get_reservations_list()
        valid_reservations = [res for res in reservations if isinstance(res, dict)]

        total = len(valid_reservations)
        confirmed = sum(1 for res in valid_reservations if res.get("confirmed", False))
        cancelled = sum(1 for res in valid_reservations if res.get("cancelled", False))
        preorders = sum(1 for res in valid_reservations if res.get("preorder", False))
        pending = total - confirmed - cancelled

        message += (
            f"üî¢ –í—Å–µ–≥–æ: {total}\n"
            f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {confirmed}\n"
            f"‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏: {pending}\n"
            f"‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ: {cancelled}\n"
            f"üçΩ –° –ø—Ä–µ–¥–∑–∞–∫–∞–∑–æ–º: {preorders}\n"
        )

        await msg.answer(message)

    except Exception as e:
        await msg.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        print(f"Statistics error: {e}")

# –ó–ê–ú–ï–ù–ò–¢–ï —Ñ—É–Ω–∫—Ü–∏—é excel_export –≤ —Ñ–∞–π–ª–µ admin.py

@router.message(F.text.lower() == "üìä excel –æ—Ç—á—ë—Ç")
async def excel_export(msg: types.Message):
    if msg.from_user.id not in ADMINS:
        return

    try:
        import pytz
        
        reservations = await get_reservations_list()
        valid_reservations = [res for res in reservations if isinstance(res, dict)]

        if not valid_reservations:
            await msg.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á—ë—Ç–∞.")
            return

        # –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞
        moscow_tz = pytz.timezone('Europe/Moscow')

        def convert_to_moscow_time(timestamp_str):
            """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç timestamp –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è"""
            if not timestamp_str or timestamp_str == '–ù–µ —É–∫–∞–∑–∞–Ω–∞':
                return '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
            
            try:
                # –ü–∞—Ä—Å–∏–º timestamp
                utc_time = datetime.fromisoformat(timestamp_str.replace('Z', '+00:00'))
                if utc_time.tzinfo is None:
                    # –ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–æ–Ω–µ, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ UTC
                    utc_time = utc_time.replace(tzinfo=pytz.UTC)
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ú–°–ö
                moscow_time = utc_time.astimezone(moscow_tz)
                return moscow_time.strftime('%d.%m.%Y %H:%M')
            except Exception as e:
                print(f"DEBUG: –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ {timestamp_str}: {e}")
                return timestamp_str

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Excel —Å —Ä—É—Å–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
        excel_data = []
        for res in valid_reservations:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º place –≤ –∞–¥—Ä–µ—Å
            raw_place = res.get('place', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            place_address = PLACE_ADDRESSES.get(str(raw_place), raw_place) if raw_place != '–ù–µ —É–∫–∞–∑–∞–Ω–æ' else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ —Ä—É—Å—Å–∫–æ–º
            if res.get("cancelled") or res.get("status") == "cancelled":
                status = "–û—Ç–º–µ–Ω–µ–Ω–∞"
            elif res.get("confirmed") or res.get("status") == "confirmed":
                status = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞"
            else:
                status = "–í –æ–∂–∏–¥–∞–Ω–∏–∏"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å created_at)
            created_at_moscow = '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
            if res.get('created_at'):
                created_at_moscow = convert_to_moscow_time(res['created_at'])
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è Excel
            excel_record = {
                # "ID –±—Ä–æ–Ω–∏": res.get('id', ''),
                # "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è": res.get('user_id', ''),
                "–ò–º—è": res.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                "–¢–µ–ª–µ—Ñ–æ–Ω": res.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω'),
                "–ú–µ—Å—Ç–æ": place_address,
                "–î–∞—Ç–∞": res.get('date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞'),
                "–í—Ä–µ–º—è": res.get('time', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—á)": res.get('duration', 1),
                "–°—Ç–∞—Ç—É—Å": status,
                # "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞": "–î–∞" if res.get('confirmed') else "–ù–µ—Ç",
                "–û—Ç–º–µ–Ω–µ–Ω–∞": "–î–∞" if res.get('cancelled') else "–ù–µ—Ç",
                "–ü—Ä–µ–¥–∑–∞–∫–∞–∑": "–î–∞" if res.get('preorder') else "–ù–µ—Ç",
                # "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è": created_at_moscow,
                "–î–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è": convert_to_moscow_time(res.get('confirmed_at', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')),
                "–î–∞—Ç–∞ –æ—Ç–º–µ–Ω—ã": convert_to_moscow_time(res.get('cancelled_at', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')),
                "–î–∞—Ç–∞ –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞": convert_to_moscow_time(res.get('preorder_at', '–ù–µ —É–∫–∞–∑–∞–Ω–∞'))
            }
            excel_data.append(excel_record)

        df = pd.DataFrame(excel_data)

        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è–º –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ª–∏—Å—Ç–æ–≤
        places = df["–ú–µ—Å—Ç–æ"].unique()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è –≤ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        current_moscow_time = datetime.now(moscow_tz)
        timestamp = current_moscow_time.strftime('%Y%m%d_%H%M')
        
        with tempfile.NamedTemporaryFile(delete=False, suffix=".xlsx") as f:
            with pd.ExcelWriter(f.name, engine="openpyxl") as writer:
                
                # –°–æ–∑–¥–∞–µ–º –æ–±—â–∏–π –ª–∏—Å—Ç —Å–æ –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                df.to_excel(writer, index=False, sheet_name="–í—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
                stats_data = {
                    "–°—Ç–∞—Ç—É—Å": ["–í—Å–µ–≥–æ", "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ", "–í –æ–∂–∏–¥–∞–Ω–∏–∏", "–û—Ç–º–µ–Ω–µ–Ω–æ", "–° –ø—Ä–µ–¥–∑–∞–∫–∞–∑–æ–º"],
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": [
                        len(df),
                        len(df[df["–°—Ç–∞—Ç—É—Å"] == "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞"]),
                        len(df[df["–°—Ç–∞—Ç—É—Å"] == "–í –æ–∂–∏–¥–∞–Ω–∏–∏"]),
                        len(df[df["–°—Ç–∞—Ç—É—Å"] == "–û—Ç–º–µ–Ω–µ–Ω–∞"]),
                        len(df[df["–ü—Ä–µ–¥–∑–∞–∫–∞–∑"] == "–î–∞"])
                    ]
                }
                stats_df = pd.DataFrame(stats_data)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                info_data = {
                    "–ü–∞—Ä–∞–º–µ—Ç—Ä": [
                        "–î–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞", 
                        "–í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", 
                        "–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π",
                        "–í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞ –¥–∞–Ω–Ω—ã—Ö"
                    ],
                    "–ó–Ω–∞—á–µ–Ω–∏–µ": [
                        current_moscow_time.strftime('%d.%m.%Y'),
                        current_moscow_time.strftime('%H:%M'),
                        len(df),
                        "–ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è (UTC+3)"
                    ]
                }
                info_df = pd.DataFrame(info_data)
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                combined_stats = pd.concat([info_df, pd.DataFrame([["", ""]], columns=["–ü–∞—Ä–∞–º–µ—Ç—Ä", "–ó–Ω–∞—á–µ–Ω–∏–µ"]), stats_df], ignore_index=True)
                combined_stats.to_excel(writer, index=False, sheet_name="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
                
                # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ª–∏—Å—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è
                for place in places:
                    if pd.notna(place) and place != '–ù–µ —É–∫–∞–∑–∞–Ω–æ':
                        sheet_df = df[df["–ú–µ—Å—Ç–æ"] == place]
                        # –û–±—Ä–µ–∑–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ –¥–æ 31 —Å–∏–º–≤–æ–ª–∞ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Excel)
                        sheet_name = place[:31] if len(place) <= 31 else place[:28] + "..."
                        
                        if not sheet_df.empty:
                            sheet_df.to_excel(writer, index=False, sheet_name=sheet_name)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            caption_text = (
                f"üìä –û—Ç—á—ë—Ç –ø–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º\n"
                f"üïê –°–æ–∑–¥–∞–Ω: {current_moscow_time.strftime('%d.%m.%Y –≤ %H:%M')}\n\n"
                f"üìà –õ–∏—Å—Ç—ã:\n"
                f"‚Ä¢ –í—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫)\n"
                f"‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Å–≤–æ–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)\n"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏—Å—Ç–∞—Ö –∑–∞–≤–µ–¥–µ–Ω–∏–π
            for place in places:
                if place != '–ù–µ —É–∫–∞–∑–∞–Ω–æ':
                    place_count = len(df[df["–ú–µ—Å—Ç–æ"] == place])
                    caption_text += f"‚Ä¢ {place} ({place_count} –±—Ä–æ–Ω.)\n"
            

            await msg.answer_document(
                types.FSInputFile(f.name, filename=f"–æ—Ç—á–µ—Ç_–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è_{timestamp}.xlsx"),
                caption=caption_text
            )

    except Exception as e:
        await msg.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞")
        print(f"Excel export error: {e}")
        import traceback
        traceback.print_exc()

@router.message(F.text.lower() == "üóë –æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –æ—Ç–º–µ–Ω—ã")
async def manual_cleanup(msg: types.Message):
    if msg.from_user.id not in ADMINS:
        return
    
    loading_msg = await msg.answer("üóë –û—á–∏—â–∞—é —Å—Ç–∞—Ä—ã–µ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏...")
    result = await cleanup_old_cancelled_reservations()
    await loading_msg.delete()
    
    if result:
        deleted_count = result.get('deleted_count', 0)
        await msg.answer(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\nüóë –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {deleted_count}")
    else:
        await msg.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ")





@router.callback_query(F.data.startswith("approve_"))
async def confirm_res(callback: types.CallbackQuery):
    try:
        _, uid, date, time = callback.data.split("_")

        async with httpx.AsyncClient() as client:
            await client.post(
                f"{API_URL}/confirm",
                params={"user_id": uid, "date": date, "time": time}
            )

        reservations = await get_reservations_list()
        res = next(
            (r for r in reservations if
             isinstance(r, dict) and 
             str(r.get("user_id")) == uid and
             r.get("date") == date and
             r.get("time") == time),
            None
        )

        if not res:
            await callback.message.answer("‚ö†Ô∏è –ë—Ä–æ–Ω—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–µ—Ç–∞–ª–∏.")
            return

        raw_place = res.get("place", "–∑–∞–≤–µ–¥–µ–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ")
        place = PLACE_ADDRESSES.get(str(raw_place), raw_place)
        duration = res.get("duration", 1)
        name = res.get("name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–º–µ—Ç–∫–∏ –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞
        kb = InlineKeyboardBuilder()
        kb.button(
            text="üçΩ –û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–µ–¥–∑–∞–∫–∞–∑",
            callback_data=f"preorder_{uid}_{date}_{time}"
        )

        await callback.message.answer(
            f"‚úÖ –ë—Ä–æ–Ω—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞\nüë§ {name}\n\n"
            f"üìÖ {date} ‚è∞ {time}\nüìç {place}",
            reply_markup=kb.as_markup()
        )

        await callback.bot.send_message(
            int(uid),
            f"‚úÖ –í–∞—à–∞ –±—Ä–æ–Ω—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n"
            f"üìÖ –î–∞—Ç–∞: {date}\n"
            f"‚è∞ –í—Ä–µ–º—è: {time} ({duration} —á)\n"
            f"üìç –ó–∞–≤–µ–¥–µ–Ω–∏–µ: {place}\n"
            "–ñ–¥—ë–º –≤–∞—Å! ü§ó"
        )

        # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            await callback.message.edit_reply_markup(reply_markup=None)
        except:
            pass

    except Exception as e:
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏")
        print(f"Confirm reservation error: {e}")

@router.callback_query(F.data.startswith("preorder_"))
async def mark_preorder(callback: types.CallbackQuery):
    try:
        _, uid, date, time = callback.data.split("_")

        # –ü–æ–º–µ—á–∞–µ–º –ø—Ä–µ–¥–∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ API
        async with httpx.AsyncClient() as client:
            response = await client.post(
                f"{API_URL}/mark_preorder",
                params={
                    "user_id": uid,
                    "date": date,
                    "time": time,
                    "preorder_at": datetime.now().isoformat()
                }
            )
            
            if response.status_code == 200:
                result = response.json()
                if "error" not in result:
                    await callback.message.answer("üçΩ –ü—Ä–µ–¥–∑–∞–∫–∞–∑ –æ—Ç–º–µ—á–µ–Ω ‚úÖ")
                    
                    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞
                    try:
                        await callback.message.edit_reply_markup(reply_markup=None)
                    except:
                        pass
                else:
                    await callback.message.answer(f"‚ö†Ô∏è {result['error']}")
            else:
                await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞")

    except Exception as e:
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞")
        print(f"Mark preorder error: {e}")

@router.callback_query(F.data.startswith("cancel_"))
async def cancel_reservation(callback: types.CallbackQuery):
    try:
        _, uid, date, time = callback.data.split("_")
        print(f"BOT: Attempting to cancel reservation:")
        print(f"  user_id: {uid}")
        print(f"  date: {date}")
        print(f"  time: {time}")

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä–æ–Ω–∏
        reservations = await get_reservations_list()
        res = next(
            (r for r in reservations if
             isinstance(r, dict) and 
             str(r.get("user_id")) == uid and
             r.get("date") == date and
             r.get("time") == time),
            None
        )

        if not res:
            await callback.message.answer("‚ö†Ô∏è –ë—Ä–æ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ")
            return

        print(f"BOT: Found reservation to cancel: {res}")

        # –û—Ç–º–µ–Ω—è–µ–º –±—Ä–æ–Ω—å —á–µ—Ä–µ–∑ API
        async with httpx.AsyncClient() as client:
            print(f"BOT: Sending API request to cancel reservation")
            response = await client.post(
                f"{API_URL}/cancel_reservation",
                params={
                    "user_id": uid, 
                    "date": date, 
                    "time": time,
                    "cancelled_at": datetime.now().isoformat()
                }
            )
            
            print(f"BOT: API response status: {response.status_code}")
            result = response.json()
            print(f"BOT: API response body: {result}")
            
            if response.status_code != 200:
                await callback.message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API: {response.status_code}")
                return
                
            if "error" in result:
                await callback.message.answer(f"‚ö†Ô∏è {result['error']}")
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ - –ø—Ä–æ–≤–µ—Ä–∏–º —Å—Ç–∞—Ç—É—Å –±—Ä–æ–Ω–∏ —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—ã–π API
                debug_response = await client.get(
                    f"{API_URL}/check_reservation_status",
                    params={"user_id": uid, "date": date, "time": time}
                )
                debug_result = debug_response.json()
                print(f"BOT: Debug check result: {debug_result}")
                
                if debug_result.get("found"):
                    await callback.message.answer(
                        f"üîç <b>–û—Ç–ª–∞–¥–∫–∞:</b>\n"
                        f"–ë—Ä–æ–Ω—å –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ:\n"
                        f"ID: {debug_result['id']}\n"
                        f"Cancelled: {debug_result['reservation'].get('cancelled', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                        f"Status: {debug_result['reservation'].get('status', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}",
                        parse_mode="HTML"
                    )
                return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–º–µ–Ω–µ
        raw_place = res.get("place", "–∑–∞–≤–µ–¥–µ–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ")
        place = PLACE_ADDRESSES.get(str(raw_place), raw_place)
        duration = res.get("duration", 1)
        name = res.get("name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")

        await callback.message.answer(f"‚úÖ –ë—Ä–æ–Ω—å –æ—Ç–º–µ–Ω–µ–Ω–∞\nüë§ {name}")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await callback.bot.send_message(
                int(uid),
                f"‚ùå –í–∞—à–∞ –±—Ä–æ–Ω—å –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n\n"
                f"üìÖ –î–∞—Ç–∞: {date}\n"
                f"‚è∞ –í—Ä–µ–º—è: {time} ({duration} —á)\n"
                f"üìç –ó–∞–≤–µ–¥–µ–Ω–∏–µ: {place}\n\n"
                f"–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏.\n\n"
                f"‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–π –±—Ä–æ–Ω–∏ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ 3 –¥–Ω—è."
            )
        except Exception as e:
            print(f"Failed to notify user {uid}: {e}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ (—É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏)
        try:
            await callback.message.edit_reply_markup(reply_markup=None)
        except:
            pass

    except Exception as e:
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –±—Ä–æ–Ω–∏")
        print(f"Cancel reservation error: {e}")
        import traceback
        traceback.print_exc()

async def format_reservation_admin(res: dict, number: int, status_icon: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏ —Å –º–æ—Å–∫–æ–≤—Å–∫–∏–º –≤—Ä–µ–º–µ–Ω–µ–º"""
    import pytz
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –º–µ—Å—Ç–∞ –≤ –∞–¥—Ä–µ—Å
    raw_place = res.get('place', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    if str(raw_place) in PLACE_ADDRESSES:
        place = PLACE_ADDRESSES[str(raw_place)]
    else:
        place = raw_place if raw_place != '–ù–µ —É–∫–∞–∑–∞–Ω–æ' else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
    
    formatted = (
        f"{status_icon} <b>–ë—Ä–æ–Ω—å #{number}</b>\n"
        f"üë§ {res.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} | üìû {res.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üìç {place}\n"
        f"üìÖ {res.get('date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')} ‚è∞ {res.get('time', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} ({res.get('duration', 1)} —á)\n"
    )
    
    # –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞
    moscow_tz = pytz.timezone('Europe/Moscow')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–∑–∞–∫–∞–∑–µ
    if res.get("preorder"):
        formatted += f"üçΩ –ü—Ä–µ–¥–∑–∞–∫–∞–∑ –æ—Ç–º–µ—á–µ–Ω\n"
        if res.get("preorder_at"):
            try:
                preorder_utc = datetime.fromisoformat(res["preorder_at"].replace('Z', '+00:00'))
                if preorder_utc.tzinfo is None:
                    preorder_utc = preorder_utc.replace(tzinfo=pytz.UTC)
                preorder_moscow = preorder_utc.astimezone(moscow_tz)
                formatted += f"üïë –ü—Ä–µ–¥–∑–∞–∫–∞–∑: {preorder_moscow.strftime('%d.%m.%Y %H:%M')} \n"
            except:
                pass
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
    if res.get("cancelled_at"):
        try:
            cancelled_utc = datetime.fromisoformat(res["cancelled_at"].replace('Z', '+00:00'))
            if cancelled_utc.tzinfo is None:
                cancelled_utc = cancelled_utc.replace(tzinfo=pytz.UTC)
            cancelled_moscow = cancelled_utc.astimezone(moscow_tz)
            formatted += f"üïë –û—Ç–º–µ–Ω–µ–Ω–∞: {cancelled_moscow.strftime('%d.%m.%Y %H:%M')} \n"
        except:
            pass
    elif res.get("confirmed_at"):
        try:
            confirmed_utc = datetime.fromisoformat(res["confirmed_at"].replace('Z', '+00:00'))
            if confirmed_utc.tzinfo is None:
                confirmed_utc = confirmed_utc.replace(tzinfo=pytz.UTC)
            confirmed_moscow = confirmed_utc.astimezone(moscow_tz)
            formatted += f"üïë –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞: {confirmed_moscow.strftime('%d.%m.%Y %H:%M')} \n"
        except:
            pass
            
    return formatted


@router.message(F.text.lower() == "üìã –≤—Å–µ –±—Ä–æ–Ω–∏")
async def view_all_reservations(msg: types.Message):
    if msg.from_user.id not in ADMINS:
        await msg.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    try:
        loading_msg = await msg.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –≤—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...")

        reservations = await get_reservations_list()
        valid_reservations = [res for res in reservations if isinstance(res, dict)]

        await loading_msg.delete()

        if not valid_reservations:
            await msg.answer("üì≠ –ù–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ")
            return

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –∏ –≤—Ä–µ–º–µ–Ω–∏ (—Å–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ)
        valid_reservations.sort(key=lambda x: (x.get("date", ""), x.get("time", "")), reverse=True)

        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ø–æ 5 –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)
        page_size = 5
        total_pages = (len(valid_reservations) + page_size - 1) // page_size

        for page in range(total_pages):
            start_idx = page * page_size
            end_idx = min((page + 1) * page_size, len(valid_reservations))
            page_reservations = valid_reservations[start_idx:end_idx]

            response = f"üìã <b>–í—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</b> (—Å—Ç—Ä. {page + 1}/{total_pages})\n\n"

            for i, res in enumerate(page_reservations, start_idx + 1):
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –∏–∫–æ–Ω–∫—É
                if res.get("cancelled") or res.get("status") == "cancelled":
                    status_icon = "‚ùå"
                    status = "–û—Ç–º–µ–Ω–µ–Ω–∞"
                elif res.get("confirmed") or res.get("status") == "confirmed":
                    status_icon = "‚úÖ"
                    status = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞"
                else:
                    status_icon = "‚è≥"
                    status = "–í –æ–∂–∏–¥–∞–Ω–∏–∏"

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–µ—Å—Ç–æ
                raw_place = res.get('place', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                place = PLACE_ADDRESSES.get(str(raw_place), raw_place)

                response += (
                    f"{status_icon} <b>#{i}</b> {res.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                    f"üìû {res.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                    f"üìç {place}\n"
                    f"üìÖ {res.get('date', '')} ‚è∞ {res.get('time', '')} ({res.get('duration', 1)} —á)\n"
                    f"üìå {status}"
                )

                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–∑–∞–∫–∞–∑ –µ—Å–ª–∏ –µ—Å—Ç—å
                if res.get("preorder"):
                    response += " üçΩ"

                response += "\n\n"

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            if page == total_pages - 1:
                response += f"üìä <b>–í—Å–µ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:</b> {len(valid_reservations)}\n"
                response += f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {sum(1 for r in valid_reservations if r.get('confirmed'))}\n"
                response += f"‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏: {sum(1 for r in valid_reservations if not r.get('confirmed') and not r.get('cancelled'))}\n"
                response += f"‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ: {sum(1 for r in valid_reservations if r.get('cancelled'))}"

            await msg.answer(response, parse_mode="HTML")

    except Exception as e:
        await msg.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π")
        print(f"View all reservations error: {e}")
        import traceback
        traceback.print_exc()


@router.message(F.text.lower() == "‚úÖ –∞–∫—Ç–∏–≤–Ω—ã–µ –±—Ä–æ–Ω–∏")
async def view_active_reservations(msg: types.Message):
    if msg.from_user.id not in ADMINS:
        await msg.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    try:
        import pytz
        loading_msg = await msg.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –∞–∫—Ç–∏–≤–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...")

        reservations = await get_reservations_list()
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ)
        moscow_tz = pytz.timezone('Europe/Moscow')
        current_date_moscow = datetime.now(moscow_tz).date()
        
        active_reservations = []
        for res in reservations:
            if isinstance(res, dict):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±—Ä–æ–Ω—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∏ –Ω–µ –æ—Ç–º–µ–Ω–µ–Ω–∞
                is_confirmed = res.get("confirmed", False)
                is_cancelled = res.get("cancelled", False) or res.get("status") == "cancelled"
                
                if is_confirmed and not is_cancelled:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞
                    try:
                        reservation_date = datetime.strptime(res.get('date', ''), '%Y-%m-%d').date()
                        if reservation_date >= current_date_moscow:
                            active_reservations.append(res)
                    except ValueError:
                        continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±—Ä–æ–Ω–∏ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –¥–∞—Ç–æ–π

        await loading_msg.delete()

        if not active_reservations:
            await msg.answer("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π")
            return

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –∏ –≤—Ä–µ–º–µ–Ω–∏ (—Å–Ω–∞—á–∞–ª–∞ –±–ª–∏–∂–∞–π—à–∏–µ)
        active_reservations.sort(key=lambda x: (x.get("date", ""), x.get("time", "")))

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –±—Ä–æ–Ω—å –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        for i, res in enumerate(active_reservations, 1):
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–µ—Å—Ç–æ
            raw_place = res.get('place', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            place = PLACE_ADDRESSES.get(str(raw_place), raw_place)

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            try:
                reservation_date = datetime.strptime(res.get('date', ''), '%Y-%m-%d').date()
                if reservation_date == current_date_moscow:
                    date_display = f"{reservation_date.strftime('%d.%m.%Y')} (—Å–µ–≥–æ–¥–Ω—è)"
                elif reservation_date == current_date_moscow + timedelta(days=1):
                    date_display = f"{reservation_date.strftime('%d.%m.%Y')} (–∑–∞–≤—Ç—Ä–∞)"
                else:
                    date_display = reservation_date.strftime('%d.%m.%Y')
            except:
                date_display = res.get('date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞
            has_preorder = res.get("preorder", False)
            
            response = (
                f"‚úÖ <b>–ê–∫—Ç–∏–≤–Ω–∞—è –±—Ä–æ–Ω—å #{i}</b>\n"
                f"üë§ {res.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                f"üìû {res.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                f"üìç {place}\n"
                f"üìÖ {date_display} ‚è∞ {res.get('time', '')} ({res.get('duration', 1)} —á)\n"
            )

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞
            if has_preorder:
                response += "üçΩ <b>–ü—Ä–µ–¥–∑–∞–∫–∞–∑ –æ—Ç–º–µ—á–µ–Ω</b>\n"
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–º–µ—Ç–∫–∏ –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
                if res.get("preorder_at"):
                    try:
                        import pytz
                        moscow_tz = pytz.timezone('Europe/Moscow')
                        preorder_utc = datetime.fromisoformat(res["preorder_at"].replace('Z', '+00:00'))
                        if preorder_utc.tzinfo is None:
                            preorder_utc = preorder_utc.replace(tzinfo=pytz.UTC)
                        preorder_moscow = preorder_utc.astimezone(moscow_tz)
                        response += f"üïë –û—Ç–º–µ—á–µ–Ω: {preorder_moscow.strftime('%d.%m %H:%M')} –ú–°–ö\n"
                    except:
                        pass

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞
            kb = InlineKeyboardBuilder()
            
            if has_preorder:
                # –ï—Å–ª–∏ –ø—Ä–µ–¥–∑–∞–∫–∞–∑ —É–∂–µ –µ—Å—Ç—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏
                kb.button(
                    text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å",
                    callback_data=f"cancel_{res['user_id']}_{res['date']}_{res['time']}"
                )
                kb.button(
                    text="üóë –°–Ω—è—Ç—å –ø—Ä–µ–¥–∑–∞–∫–∞–∑", 
                    callback_data=f"remove_preorder_{res['user_id']}_{res['date']}_{res['time']}"
                )
                kb.adjust(1)
            else:
                # –ï—Å–ª–∏ –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞ –Ω–µ—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–µ –∫–Ω–æ–ø–∫–∏
                kb.button(
                    text="üçΩ –û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–µ–¥–∑–∞–∫–∞–∑",
                    callback_data=f"preorder_{res['user_id']}_{res['date']}_{res['time']}"
                )
                kb.button(
                    text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å",
                    callback_data=f"cancel_{res['user_id']}_{res['date']}_{res['time']}"
                )
                kb.adjust(2)  # –î–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥

            await msg.answer(response, parse_mode="HTML", reply_markup=kb.as_markup())

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats_response = (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:</b>\n\n"
            f"‚úÖ –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö: {len(active_reservations)}\n"
            f"üçΩ –° –ø—Ä–µ–¥–∑–∞–∫–∞–∑–æ–º: {sum(1 for r in active_reservations if r.get('preorder'))}\n"
            f"üìã –ë–µ–∑ –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞: {sum(1 for r in active_reservations if not r.get('preorder'))}\n"
        )
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è–º
        place_stats = {}
        preorder_by_place = {}
        
        for res in active_reservations:
            raw_place = res.get('place', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            place = PLACE_ADDRESSES.get(str(raw_place), raw_place)
            
            place_stats[place] = place_stats.get(place, 0) + 1
            
            if res.get('preorder'):
                preorder_by_place[place] = preorder_by_place.get(place, 0) + 1
        
        stats_response += "\nüìç <b>–ü–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è–º:</b>\n"
        for place, count in place_stats.items():
            preorder_count = preorder_by_place.get(place, 0)
            stats_response += f"‚Ä¢ {place}: {count} (üçΩ {preorder_count})\n"

        await msg.answer(stats_response, parse_mode="HTML")

    except Exception as e:
        await msg.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π")
        print(f"View active reservations error: {e}")
        import traceback
        traceback.print_exc()


# –î–û–ë–ê–í–¨–¢–ï –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–Ω—è—Ç–∏—è –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞

@router.callback_query(F.data.startswith("remove_preorder_"))
async def remove_preorder(callback: types.CallbackQuery):
    try:
        _, _, uid, date, time = callback.data.split("_")

        # –°–Ω–∏–º–∞–µ–º –ø—Ä–µ–¥–∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ API
        async with httpx.AsyncClient() as client:
            response = await client.post(
                f"{API_URL}/remove_preorder",
                params={
                    "user_id": uid,
                    "date": date,
                    "time": time
                }
            )
            
            if response.status_code == 200:
                result = response.json()
                if "error" not in result:
                    await callback.message.answer("üóë –ü—Ä–µ–¥–∑–∞–∫–∞–∑ —Å–Ω—è—Ç")
                    
                    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                    try:
                        await callback.message.edit_reply_markup(reply_markup=None)
                    except:
                        pass
                        
                    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±—Ä–æ–Ω–∏
                    await callback.answer("–ü—Ä–µ–¥–∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç ‚úÖ")
                else:
                    await callback.message.answer(f"‚ö†Ô∏è {result['error']}")
            else:
                await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞")

    except Exception as e:
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞")
        print(f"Remove preorder error: {e}")



@router.message(F.text == "üóÇ –ü—Ä–æ—á–µ–µ")
async def show_misc_menu(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ä—ã–µ –±—Ä–æ–Ω–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    if message.from_user.id not in ADMINS:
        return
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{API_URL}/get_old_reservations?months_back=2") as resp:
                if resp.status == 200:
                    data = await resp.json()
                    old_reservations = data.get("old_reservations", {})
                else:
                    await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
                    return
        
        if not old_reservations:
            await message.answer("üìù –°—Ç–∞—Ä—ã—Ö –±—Ä–æ–Ω–µ–π (2+ –º–µ—Å—è—Ü–∞) –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        total_count = len(old_reservations)
        text = f"üóÇ <b>–°—Ç–∞—Ä—ã–µ –±—Ä–æ–Ω–∏</b> (—Å—Ç–∞—Ä—à–µ 2 –º–µ—Å—è—Ü–µ–≤)\n"
        text += f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {total_count}\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –±—Ä–æ–Ω–µ–π
        count = 0
        builder = InlineKeyboardBuilder()
        
        for res_id, reservation in old_reservations.items():
            if count >= 10:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–∫–∞–∑ 10 –±—Ä–æ–Ω—è–º–∏
                text += f"\n... –∏ –µ—â–µ {total_count - 10} –±—Ä–æ–Ω–µ–π"
                break
                
            name = reservation.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            date = reservation.get("date", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
            time = reservation.get("time", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
            days_ago = reservation.get("days_ago", 0)
            place = reservation.get("place", "")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≤–µ–¥–µ–Ω–∏–µ
            place_names = {
                "place_1": "–ü—Ä-—Ç –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π 85",
                "place_2": "–ü—Ä-—Ç –î–∑–µ—Ä–∂–∏–Ω—Å–∫–æ–≥–æ 9"
            }
            place_display = place_names.get(place, place)
            
            # –°—Ç–∞—Ç—É—Å
            status = "‚úÖ" if reservation.get("confirmed") else "‚è≥"
            if reservation.get("cancelled"):
                status = "‚ùå"
            
            count += 1
            text += f"{count}. {status} <b>{name}</b>\n"
            text += f"   üìÖ {date} –≤ {time} ({days_ago} –¥–Ω. –Ω–∞–∑–∞–¥)\n"
            text += f"   üìç {place_display}\n"
            text += f"   üÜî {res_id[:8]}...\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–æ–π –±—Ä–æ–Ω–∏
            builder.button(
                text=f"üóë –£–¥–∞–ª–∏—Ç—å {name} ({date})", 
                callback_data=f"delete_old_{res_id}"
            )
        
        builder.adjust(1)  # –ü–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å—Ç–∞—Ä—ã–µ"
        if total_count > 0:
            builder.button(text="üóë –£–¥–∞–ª–∏—Ç—å –í–°–ï —Å—Ç–∞—Ä—ã–µ –±—Ä–æ–Ω–∏", callback_data="delete_all_old")
        
        await message.answer(
            text,
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
        
    except Exception as e:
        print(f"Error in misc menu: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ä—ã—Ö –±—Ä–æ–Ω–µ–π")


@router.callback_query(F.data.startswith("delete_old_"))
async def delete_single_old_reservation(callback: CallbackQuery):
    """–£–¥–∞–ª–∏—Ç—å –æ–¥–Ω—É —Å—Ç–∞—Ä—É—é –±—Ä–æ–Ω—å"""
    reservation_id = callback.data.replace("delete_old_", "")
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.delete(f"{API_URL}/delete_reservation/{reservation_id}") as resp:
                if resp.status == 200:
                    result = await resp.json()
                    deleted_reservation = result.get("deleted_reservation", {})
                    name = deleted_reservation.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                    date = deleted_reservation.get("date", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                    
                    await callback.answer(f"‚úÖ –ë—Ä–æ–Ω—å {name} ({date}) —É–¥–∞–ª–µ–Ω–∞", show_alert=True)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
                    await callback.message.edit_text(
                        f"‚úÖ <b>–ë—Ä–æ–Ω—å —É–¥–∞–ª–µ–Ω–∞</b>\n\n"
                        f"üë§ {name}\n"
                        f"üìÖ {date}\n"
                        f"üÜî {reservation_id[:8]}...\n\n"
                        f"–î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ—á–µ–µ' —Å–Ω–æ–≤–∞.",
                        parse_mode="HTML"
                    )
                else:
                    await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", show_alert=True)
                    
    except Exception as e:
        print(f"Error deleting reservation: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "delete_all_old")
async def confirm_delete_all_old(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Å—Ç–∞—Ä—ã—Ö –±—Ä–æ–Ω–µ–π"""
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å –í–°–ï", callback_data="confirm_delete_all_old")
    builder.button(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_delete_all")
    
    await callback.message.edit_text(
        "‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï —Å—Ç–∞—Ä—ã–µ –±—Ä–æ–Ω–∏ (—Å—Ç–∞—Ä—à–µ 2 –º–µ—Å—è—Ü–µ–≤)?\n\n"
        "‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "confirm_delete_all_old")
async def delete_all_old_reservations(callback: CallbackQuery):
    """–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –±—Ä–æ–Ω–∏"""
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ä—ã—Ö –±—Ä–æ–Ω–µ–π
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{API_URL}/get_old_reservations?months_back=2") as resp:
                if resp.status == 200:
                    data = await resp.json()
                    old_reservations = data.get("old_reservations", {})
                else:
                    await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
                    return
        
        if not old_reservations:
            await callback.message.edit_text("üìù –°—Ç–∞—Ä—ã—Ö –±—Ä–æ–Ω–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        # –£–¥–∞–ª—è–µ–º –∫–∞–∂–¥—É—é –±—Ä–æ–Ω—å
        deleted_count = 0
        failed_count = 0
        
        for res_id in old_reservations.keys():
            try:
                async with aiohttp.ClientSession() as session:
                    async with session.delete(f"{API_URL}/delete_reservation/{res_id}") as resp:
                        if resp.status == 200:
                            deleted_count += 1
                        else:
                            failed_count += 1
            except:
                failed_count += 1
        
        result_text = f"üóë <b>–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ</b>\n\n"
        result_text += f"‚úÖ –£–¥–∞–ª–µ–Ω–æ: {deleted_count}\n"
        if failed_count > 0:
            result_text += f"‚ùå –û—à–∏–±–æ–∫: {failed_count}\n"
        result_text += f"\n–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(old_reservations)}"
        
        await callback.message.edit_text(result_text, parse_mode="HTML")
        await callback.answer(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} –±—Ä–æ–Ω–µ–π", show_alert=True)
        
    except Exception as e:
        print(f"Error in mass delete: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "cancel_delete_all")
async def cancel_delete_all(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –±—Ä–æ–Ω–µ–π"""
    await callback.message.edit_text(
        "‚ùå <b>–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>\n\n"
        "–°—Ç–∞—Ä—ã–µ –±—Ä–æ–Ω–∏ –Ω–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.\n"
        "–ù–∞–∂–º–∏—Ç–µ '–ü—Ä–æ—á–µ–µ' –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.",
        parse_mode="HTML"
    )


