#bot/handlers/admin.py

from aiogram import F, Router, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from firebase_admin import db
from datetime import datetime, timedelta
import asyncio
import pandas as pd
import tempfile
import httpx
from config import API_URL, ADMINS

router = Router()

admin_menu = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="üßæ –ó–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")],
    [KeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
    [KeyboardButton(text="üìä Excel –æ—Ç—á—ë—Ç")],
    [KeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –æ—Ç–º–µ–Ω—ã")],
    [KeyboardButton(text="üîç –û—Ç–ª–∞–¥–∫–∞ –±—Ä–æ–Ω–∏")]
], resize_keyboard=True)

PLACE_ADDRESSES = {
    "1": "–ü—Ä-—Ç –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π 85",
    "2": "–ü—Ä-—Ç –î–∑–µ—Ä–∂–∏–Ω—Å–∫–æ–≥–æ 9"
}

async def cleanup_old_cancelled_reservations():
    """–£–¥–∞–ª—è–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ —Å—Ç–∞—Ä—à–µ 3 –¥–Ω–µ–π"""
    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(f"{API_URL}/cleanup_cancelled")
            return response.json()
    except Exception as e:
        print(f"Cleanup error: {e}")
        return False

async def get_reservations_list():
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π"""
    async with httpx.AsyncClient() as client:
        response = await client.get(f"{API_URL}/get_reservations")
        reservations_response = response.json()
        
        if isinstance(reservations_response, dict):
            return list(reservations_response.values())
        elif isinstance(reservations_response, list):
            return reservations_response
        else:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è—Ö")

@router.message(Command("admin"))
async def admin_panel(msg: types.Message):
    if msg.from_user.id not in ADMINS:
        await msg.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    await msg.answer("üîê –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=admin_menu)

@router.message(F.text.lower() == "üßæ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")
async def pending_reservations(msg: types.Message):
    if msg.from_user.id not in ADMINS:
        await msg.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    try:
        loading_msg = await msg.answer("‚è≥ –ò—â—É –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏...")

        reservations = await get_reservations_list()

        # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
        pending_reservations = []
        for res in reservations:
            if isinstance(res, dict):
                confirmed = res.get("confirmed", False)
                cancelled = res.get("cancelled", False)
                status = res.get("status", "")
                
                # –ó–∞—è–≤–∫–∞ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –µ—Å–ª–∏ –ù–ï –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –ò –ù–ï –æ—Ç–º–µ–Ω–µ–Ω–∞
                if not confirmed and not cancelled and status != "cancelled":
                    pending_reservations.append(res)

        await loading_msg.delete()

        if not pending_reservations:
            await msg.answer("‚úÖ –ù–µ—Ç –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫")
            return

        for res in pending_reservations:
            date = res.get('date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
            time = res.get('time', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            duration = res.get('duration', 1)
            name = res.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            phone = res.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')
            place = res.get('place', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º place –µ—Å–ª–∏ —ç—Ç–æ ID
            if str(place) in PLACE_ADDRESSES:
                place = PLACE_ADDRESSES[str(place)]
            
            text = (
                f"üìÖ {date} ‚è∞ {time} ({duration} —á)\n"
                f"üë§ {name} | üìû {phone}\n"
                f"üìç {place}"
            )
            
            kb = InlineKeyboardBuilder()
            kb.button(
                text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                callback_data=f"approve_{res['user_id']}_{res['date']}_{res['time']}"
            )
            kb.button(
                text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                callback_data=f"cancel_{res['user_id']}_{res['date']}_{res['time']}"
            )
            kb.adjust(2)
            await msg.answer(text, reply_markup=kb.as_markup())

        await msg.answer(f"üîç –í—Å–µ–≥–æ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫: {len(pending_reservations)}")

    except Exception as e:
        await msg.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞—è–≤–æ–∫")
        print(f"Pending reservations error: {e}")
        import traceback
        traceback.print_exc()

@router.message(F.text.lower() == "üìà —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def statistics(msg: types.Message):
    if msg.from_user.id not in ADMINS:
        return

    try:
        message = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è:\n\n"

        reservations = await get_reservations_list()
        valid_reservations = [res for res in reservations if isinstance(res, dict)]

        total = len(valid_reservations)
        confirmed = sum(1 for res in valid_reservations if res.get("confirmed", False))
        cancelled = sum(1 for res in valid_reservations if res.get("cancelled", False))
        preorders = sum(1 for res in valid_reservations if res.get("preorder", False))
        pending = total - confirmed - cancelled

        message += (
            f"üî¢ –í—Å–µ–≥–æ: {total}\n"
            f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {confirmed}\n"
            f"‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏: {pending}\n"
            f"‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ: {cancelled}\n"
            f"üçΩ –° –ø—Ä–µ–¥–∑–∞–∫–∞–∑–æ–º: {preorders}\n"
        )

        await msg.answer(message)

    except Exception as e:
        await msg.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        print(f"Statistics error: {e}")

@router.message(F.text.lower() == "üìä excel –æ—Ç—á—ë—Ç")
async def excel_export(msg: types.Message):
    if msg.from_user.id not in ADMINS:
        return

    try:
        reservations = await get_reservations_list()
        valid_reservations = [res for res in reservations if isinstance(res, dict)]

        if not valid_reservations:
            await msg.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á—ë—Ç–∞.")
            return

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Excel —Å —Ä—É—Å–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
        excel_data = []
        for res in valid_reservations:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º place –≤ –∞–¥—Ä–µ—Å
            raw_place = res.get('place', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            place_address = PLACE_ADDRESSES.get(str(raw_place), raw_place) if raw_place != '–ù–µ —É–∫–∞–∑–∞–Ω–æ' else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ —Ä—É—Å—Å–∫–æ–º
            if res.get("cancelled") or res.get("status") == "cancelled":
                status = "–û—Ç–º–µ–Ω–µ–Ω–∞"
            elif res.get("confirmed") or res.get("status") == "confirmed":
                status = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞"
            else:
                status = "–í –æ–∂–∏–¥–∞–Ω–∏–∏"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è Excel
            excel_record = {
                "ID –±—Ä–æ–Ω–∏": res.get('id', ''),
                "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è": res.get('user_id', ''),
                "–ò–º—è": res.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                "–¢–µ–ª–µ—Ñ–æ–Ω": res.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω'),
                "–ú–µ—Å—Ç–æ": place_address,
                "–î–∞—Ç–∞": res.get('date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞'),
                "–í—Ä–µ–º—è": res.get('time', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—á)": res.get('duration', 1),
                "–°—Ç–∞—Ç—É—Å": status,
                "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞": "–î–∞" if res.get('confirmed') else "–ù–µ—Ç",
                "–û—Ç–º–µ–Ω–µ–Ω–∞": "–î–∞" if res.get('cancelled') else "–ù–µ—Ç",
                "–ü—Ä–µ–¥–∑–∞–∫–∞–∑": "–î–∞" if res.get('preorder') else "–ù–µ—Ç",
                "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è": res.get('created_at', '–ù–µ —É–∫–∞–∑–∞–Ω–∞'),
                "–î–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è": res.get('confirmed_at', '–ù–µ —É–∫–∞–∑–∞–Ω–∞'),
                "–î–∞—Ç–∞ –æ—Ç–º–µ–Ω—ã": res.get('cancelled_at', '–ù–µ —É–∫–∞–∑–∞–Ω–∞'),
                "–î–∞—Ç–∞ –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞": res.get('preorder_at', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
            }
            excel_data.append(excel_record)

        df = pd.DataFrame(excel_data)

        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è–º –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ª–∏—Å—Ç–æ–≤
        places = df["–ú–µ—Å—Ç–æ"].unique()
        
        with tempfile.NamedTemporaryFile(delete=False, suffix=".xlsx") as f:
            with pd.ExcelWriter(f.name, engine="openpyxl") as writer:
                
                # –°–æ–∑–¥–∞–µ–º –æ–±—â–∏–π –ª–∏—Å—Ç —Å–æ –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                df.to_excel(writer, index=False, sheet_name="–í—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
                stats_data = {
                    "–°—Ç–∞—Ç—É—Å": ["–í—Å–µ–≥–æ", "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ", "–í –æ–∂–∏–¥–∞–Ω–∏–∏", "–û—Ç–º–µ–Ω–µ–Ω–æ", "–° –ø—Ä–µ–¥–∑–∞–∫–∞–∑–æ–º"],
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": [
                        len(df),
                        len(df[df["–°—Ç–∞—Ç—É—Å"] == "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞"]),
                        len(df[df["–°—Ç–∞—Ç—É—Å"] == "–í –æ–∂–∏–¥–∞–Ω–∏–∏"]),
                        len(df[df["–°—Ç–∞—Ç—É—Å"] == "–û—Ç–º–µ–Ω–µ–Ω–∞"]),
                        len(df[df["–ü—Ä–µ–¥–∑–∞–∫–∞–∑"] == "–î–∞"])
                    ]
                }
                stats_df = pd.DataFrame(stats_data)
                stats_df.to_excel(writer, index=False, sheet_name="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
                
                # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ª–∏—Å—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è
                for place in places:
                    if pd.notna(place) and place != '–ù–µ —É–∫–∞–∑–∞–Ω–æ':
                        sheet_df = df[df["–ú–µ—Å—Ç–æ"] == place]
                        # –û–±—Ä–µ–∑–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ –¥–æ 31 —Å–∏–º–≤–æ–ª–∞ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Excel)
                        sheet_name = place[:31] if len(place) <= 31 else place[:28] + "..."
                        
                        if not sheet_df.empty:
                            sheet_df.to_excel(writer, index=False, sheet_name=sheet_name)

            await msg.answer_document(
                types.FSInputFile(f.name, filename="–æ—Ç—á–µ—Ç_–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.xlsx"),
                caption="üìä –û—Ç—á—ë—Ç –ø–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º\n\n"
                       f"üìà –õ–∏—Å—Ç—ã:\n"
                       f"‚Ä¢ –í—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n"
                       f"‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n" +
                       "\n".join([f"‚Ä¢ {place}" for place in places if place != '–ù–µ —É–∫–∞–∑–∞–Ω–æ'])
            )

    except Exception as e:
        await msg.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞")
        print(f"Excel export error: {e}")
        import traceback
        traceback.print_exc()

@router.message(F.text.lower() == "üóë –æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –æ—Ç–º–µ–Ω—ã")
async def manual_cleanup(msg: types.Message):
    if msg.from_user.id not in ADMINS:
        return
    
    loading_msg = await msg.answer("üóë –û—á–∏—â–∞—é —Å—Ç–∞—Ä—ã–µ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏...")
    result = await cleanup_old_cancelled_reservations()
    await loading_msg.delete()
    
    if result:
        deleted_count = result.get('deleted_count', 0)
        await msg.answer(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\nüóë –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {deleted_count}")
    else:
        await msg.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ")

@router.message(F.text.lower() == "üîç –æ—Ç–ª–∞–¥–∫–∞ –±—Ä–æ–Ω–∏")
async def debug_reservation(msg: types.Message):
    if msg.from_user.id not in ADMINS:
        return
    
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\nuser_id date time\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: 123456789 2025-08-21 16:00")

@router.message(F.text.regexp(r'^\d+\s+\d{4}-\d{2}-\d{2}\s+\d{2}:\d{2}$'))
async def process_debug_request(msg: types.Message):
    if msg.from_user.id not in ADMINS:
        return
    
    try:
        parts = msg.text.strip().split()
        user_id, date, time = parts[0], parts[1], parts[2]
        
        async with httpx.AsyncClient() as client:
            response = await client.get(
                f"{API_URL}/check_reservation_status",
                params={"user_id": user_id, "date": date, "time": time}
            )
            result = response.json()
            
            if result.get("found"):
                reservation = result["reservation"]
                status_text = (
                    f"üîç <b>–û—Ç–ª–∞–¥–∫–∞ –±—Ä–æ–Ω–∏</b>\n\n"
                    f"üìù ID: {result['id']}\n"
                    f"üë§ User ID: {reservation.get('user_id')}\n"
                    f"üìÖ –î–∞—Ç–∞: {reservation.get('date')}\n"
                    f"‚è∞ –í—Ä–µ–º—è: {reservation.get('time')}\n"
                    f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞: {reservation.get('confirmed', False)}\n"
                    f"‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞: {reservation.get('cancelled', False)}\n"
                    f"üçΩ –ü—Ä–µ–¥–∑–∞–∫–∞–∑: {reservation.get('preorder', False)}\n"
                    f"üè∑ –°—Ç–∞—Ç—É—Å: {reservation.get('status', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
                    f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {reservation.get('phone', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
                    f"üë§ –ò–º—è: {reservation.get('name', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                )
                
                if reservation.get('cancelled_at'):
                    status_text += f"‚è∞ –û—Ç–º–µ–Ω–µ–Ω–∞: {reservation['cancelled_at']}\n"
                
                if reservation.get('preorder_at'):
                    status_text += f"üçΩ –ü—Ä–µ–¥–∑–∞–∫–∞–∑ –æ—Ç–º–µ—á–µ–Ω: {reservation['preorder_at']}\n"
                    
                await msg.answer(status_text, parse_mode="HTML")
            else:
                await msg.answer("‚ùå –ë—Ä–æ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                
    except Exception as e:
        await msg.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")

@router.callback_query(F.data.startswith("approve_"))
async def confirm_res(callback: types.CallbackQuery):
    try:
        _, uid, date, time = callback.data.split("_")

        async with httpx.AsyncClient() as client:
            await client.post(
                f"{API_URL}/confirm",
                params={"user_id": uid, "date": date, "time": time}
            )

        reservations = await get_reservations_list()
        res = next(
            (r for r in reservations if
             isinstance(r, dict) and 
             str(r.get("user_id")) == uid and
             r.get("date") == date and
             r.get("time") == time),
            None
        )

        if not res:
            await callback.message.answer("‚ö†Ô∏è –ë—Ä–æ–Ω—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–µ—Ç–∞–ª–∏.")
            return

        raw_place = res.get("place", "–∑–∞–≤–µ–¥–µ–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ")
        place = PLACE_ADDRESSES.get(str(raw_place), raw_place)
        duration = res.get("duration", 1)
        name = res.get("name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–º–µ—Ç–∫–∏ –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞
        kb = InlineKeyboardBuilder()
        kb.button(
            text="üçΩ –û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–µ–¥–∑–∞–∫–∞–∑",
            callback_data=f"preorder_{uid}_{date}_{time}"
        )

        await callback.message.answer(
            f"‚úÖ –ë—Ä–æ–Ω—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞\nüë§ {name}\n\n"
            f"üìÖ {date} ‚è∞ {time}\nüìç {place}",
            reply_markup=kb.as_markup()
        )

        await callback.bot.send_message(
            int(uid),
            f"‚úÖ –í–∞—à–∞ –±—Ä–æ–Ω—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n"
            f"üìÖ –î–∞—Ç–∞: {date}\n"
            f"‚è∞ –í—Ä–µ–º—è: {time} ({duration} —á)\n"
            f"üìç –ó–∞–≤–µ–¥–µ–Ω–∏–µ: {place}\n"
            "–ñ–¥—ë–º –≤–∞—Å! ü§ó"
        )

        # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            await callback.message.edit_reply_markup(reply_markup=None)
        except:
            pass

    except Exception as e:
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏")
        print(f"Confirm reservation error: {e}")

@router.callback_query(F.data.startswith("preorder_"))
async def mark_preorder(callback: types.CallbackQuery):
    try:
        _, uid, date, time = callback.data.split("_")

        # –ü–æ–º–µ—á–∞–µ–º –ø—Ä–µ–¥–∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ API
        async with httpx.AsyncClient() as client:
            response = await client.post(
                f"{API_URL}/mark_preorder",
                params={
                    "user_id": uid,
                    "date": date,
                    "time": time,
                    "preorder_at": datetime.now().isoformat()
                }
            )
            
            if response.status_code == 200:
                result = response.json()
                if "error" not in result:
                    await callback.message.answer("üçΩ –ü—Ä–µ–¥–∑–∞–∫–∞–∑ –æ—Ç–º–µ—á–µ–Ω ‚úÖ")
                    
                    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞
                    try:
                        await callback.message.edit_reply_markup(reply_markup=None)
                    except:
                        pass
                else:
                    await callback.message.answer(f"‚ö†Ô∏è {result['error']}")
            else:
                await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞")

    except Exception as e:
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞")
        print(f"Mark preorder error: {e}")

@router.callback_query(F.data.startswith("cancel_"))
async def cancel_reservation(callback: types.CallbackQuery):
    try:
        _, uid, date, time = callback.data.split("_")
        print(f"BOT: Attempting to cancel reservation:")
        print(f"  user_id: {uid}")
        print(f"  date: {date}")
        print(f"  time: {time}")

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä–æ–Ω–∏
        reservations = await get_reservations_list()
        res = next(
            (r for r in reservations if
             isinstance(r, dict) and 
             str(r.get("user_id")) == uid and
             r.get("date") == date and
             r.get("time") == time),
            None
        )

        if not res:
            await callback.message.answer("‚ö†Ô∏è –ë—Ä–æ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ")
            return

        print(f"BOT: Found reservation to cancel: {res}")

        # –û—Ç–º–µ–Ω—è–µ–º –±—Ä–æ–Ω—å —á–µ—Ä–µ–∑ API
        async with httpx.AsyncClient() as client:
            print(f"BOT: Sending API request to cancel reservation")
            response = await client.post(
                f"{API_URL}/cancel_reservation",
                params={
                    "user_id": uid, 
                    "date": date, 
                    "time": time,
                    "cancelled_at": datetime.now().isoformat()
                }
            )
            
            print(f"BOT: API response status: {response.status_code}")
            result = response.json()
            print(f"BOT: API response body: {result}")
            
            if response.status_code != 200:
                await callback.message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API: {response.status_code}")
                return
                
            if "error" in result:
                await callback.message.answer(f"‚ö†Ô∏è {result['error']}")
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ - –ø—Ä–æ–≤–µ—Ä–∏–º —Å—Ç–∞—Ç—É—Å –±—Ä–æ–Ω–∏ —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—ã–π API
                debug_response = await client.get(
                    f"{API_URL}/check_reservation_status",
                    params={"user_id": uid, "date": date, "time": time}
                )
                debug_result = debug_response.json()
                print(f"BOT: Debug check result: {debug_result}")
                
                if debug_result.get("found"):
                    await callback.message.answer(
                        f"üîç <b>–û—Ç–ª–∞–¥–∫–∞:</b>\n"
                        f"–ë—Ä–æ–Ω—å –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ:\n"
                        f"ID: {debug_result['id']}\n"
                        f"Cancelled: {debug_result['reservation'].get('cancelled', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                        f"Status: {debug_result['reservation'].get('status', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}",
                        parse_mode="HTML"
                    )
                return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–º–µ–Ω–µ
        raw_place = res.get("place", "–∑–∞–≤–µ–¥–µ–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ")
        place = PLACE_ADDRESSES.get(str(raw_place), raw_place)
        duration = res.get("duration", 1)
        name = res.get("name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")

        await callback.message.answer(f"‚úÖ –ë—Ä–æ–Ω—å –æ—Ç–º–µ–Ω–µ–Ω–∞\nüë§ {name}")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await callback.bot.send_message(
                int(uid),
                f"‚ùå –í–∞—à–∞ –±—Ä–æ–Ω—å –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n\n"
                f"üìÖ –î–∞—Ç–∞: {date}\n"
                f"‚è∞ –í—Ä–µ–º—è: {time} ({duration} —á)\n"
                f"üìç –ó–∞–≤–µ–¥–µ–Ω–∏–µ: {place}\n\n"
                f"–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏.\n\n"
                f"‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–π –±—Ä–æ–Ω–∏ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ 3 –¥–Ω—è."
            )
        except Exception as e:
            print(f"Failed to notify user {uid}: {e}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ (—É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏)
        try:
            await callback.message.edit_reply_markup(reply_markup=None)
        except:
            pass

    except Exception as e:
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –±—Ä–æ–Ω–∏")
        print(f"Cancel reservation error: {e}")
        import traceback
        traceback.print_exc()