#bot/hundlers/user.py
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.filters import CommandStart
from aiogram.fsm.state import StatesGroup, State
import pytz
import httpx
from config import API_URL
from datetime import datetime
from keyboards.main import main_menu
from russian_calendar import RussianCalendar, CalendarCallback
from keyboards.inline import duration_kb, dynamic_hours_kb, place_kb
from utils.admin_notify import notify_admin_new_booking
from typing import Optional, Dict
import phonenumbers
from phonenumbers.phonenumberutil import NumberParseException

router = Router()


PLACE_ADDRESSES = {
    "1": "–ü—Ä-—Ç –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π 85",
    "2": "–ü—Ä-—Ç –î–∑–µ—Ä–∂–∏–Ω—Å–∫–æ–≥–æ 9"
}

class ReserveState(StatesGroup):
    place = State()
    date = State()
    time = State()
    duration = State()
    name = State()
    phone = State()

async def make_api_request(
    method: str,
    endpoint: str,
    params: Optional[Dict] = None,
    json: Optional[Dict] = None
) -> Dict:
    async with httpx.AsyncClient() as client:
        response = await client.request(
            method,
            f"{API_URL}{endpoint}",
            params=params,
            json=json
        )
        return response.json()

@router.message(CommandStart())
async def start(msg: types.Message):
    await msg.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–∏–∫–æ–≤!\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=main_menu()
    )

@router.message(F.text.lower().in_(["üìÖ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", "–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å"]))
async def start_reserve(msg: types.Message, state: FSMContext):
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ:", reply_markup=place_kb())
    await state.set_state(ReserveState.place)

@router.callback_query(F.data.startswith("place_"), ReserveState.place)
async def select_place(callback: types.CallbackQuery, state: FSMContext):
    place = callback.data.replace("place_", "")
    await state.update_data(place=place)
    await callback.message.answer(
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=await RussianCalendar().start_calendar()
    )
    await state.set_state(ReserveState.date)


# @router.callback_query(calendar_cb.filter(), ReserveState.date)
# async def process_date(callback_query: types.CallbackQuery, callback_data: dict, state: FSMContext):
#     selected, selected_date = await RussianCalendar().process_selection(callback_query, callback_data)
    
#     if not selected:
#         return

#     if selected_date.date() < datetime.now().date():
#         await callback_query.message.answer("–í—ã–±—Ä–∞–Ω–∞ –ø—Ä–æ—à–µ–¥—à–∞—è –¥–∞—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.")
#         return

#     await state.update_data(date=selected_date.strftime("%Y-%m-%d"))
#     await callback_query.message.answer(
#         f"–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {selected_date.strftime('%d.%m.%Y')}\n–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:",
#         reply_markup=dynamic_hours_kb()
#     )
#     await state.set_state(ReserveState.time)

@router.callback_query(CalendarCallback.filter(), ReserveState.date)
async def process_date(callback_query: types.CallbackQuery, callback_data: CalendarCallback, state: FSMContext):
    import pytz
    
    selected, selected_date = await RussianCalendar().process_selection(callback_query, callback_data)

    if not selected:
        return

    selected_date_str = selected_date.strftime("%Y-%m-%d")
    await state.update_data(date=selected_date_str)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞—Ç—ã
    formatted_date = selected_date.strftime('%d.%m.%Y')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
    moscow_tz = pytz.timezone('Europe/Moscow')
    now_moscow = datetime.now(moscow_tz)
    is_today = selected_date.date() == now_moscow.date()
    
    if is_today:
        current_time_str = now_moscow.strftime('%H:%M')
        message_text = f"–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {formatted_date} (—Å–µ–≥–æ–¥–Ω—è)\n–°–µ–π—á–∞—Å: {current_time_str} –ú–°–ö\n–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:"
    else:
        message_text = f"–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {formatted_date}\n–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:"
    
    print(f"DEBUG: –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É: {selected_date_str}")
    
    await callback_query.message.answer(
        message_text,
        reply_markup=dynamic_hours_kb(selected_date_str)
    )
    await state.set_state(ReserveState.time)


@router.callback_query(F.data == "time_unavailable")
async def time_unavailable_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–ª—É—á–∞—è –∫–æ–≥–¥–∞ –≤—Ä–µ–º—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å"""
    await callback.answer(
        "‚è∞ –ù–∞ —Å–µ–≥–æ–¥–Ω—è –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å.\n"
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É.",
        show_alert=True
    )

@router.callback_query(F.data == "ignore", ReserveState.date)
async def ignore_past_date(callback: types.CallbackQuery):
    await callback.answer(
        "–ù–µ–ª—å–∑—è –≤—ã–±–∏—Ä–∞—Ç—å –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å.",
        show_alert=False  # –≠—Ç–æ toast!
    )
    
@router.callback_query(F.data.startswith("time_"), ReserveState.time)
async def select_time(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "time_unavailable":
        await callback.answer(
            "‚è∞ –ù–∞ —Å–µ–≥–æ–¥–Ω—è –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É.",
            show_alert=True
        )
        return
    
    time = callback.data.split("_")[1]
    await state.update_data(time=time)
    
    # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    try:
        from datetime import datetime
        start_time = datetime.strptime(time, "%H:%M")
        closing_time = datetime.strptime("23:00", "%H:%M")
        
        max_hours = (closing_time - start_time).seconds // 3600
        
        if max_hours <= 0:
            await callback.message.answer(
                f"‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ {time} –∑–∞–≤–µ–¥–µ–Ω–∏–µ —É–∂–µ –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã–≤–∞—Ç—å—Å—è.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –±–æ–ª–µ–µ —Ä–∞–Ω–Ω–µ–µ –≤—Ä–µ–º—è.",
                reply_markup=dynamic_hours_kb()
            )
            return
        elif max_hours >= 3:
            duration_text = "‚è±Ô∏è –£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–≤ —á–∞—Å–∞—Ö):"
        else:
            duration_text = f"‚è±Ô∏è –£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–≤ —á–∞—Å–∞—Ö):\n–ó–∞–≤–µ–¥–µ–Ω–∏–µ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –≤ 23:00, –º–∞–∫—Å–∏–º—É–º {max_hours} —á"
            
    except:
        duration_text = "‚è±Ô∏è –£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–≤ —á–∞—Å–∞—Ö):"
    
    await callback.message.answer(
        duration_text, 
        reply_markup=duration_kb(time)  # –ü–µ—Ä–µ–¥–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    )
    await state.set_state(ReserveState.duration)



@router.callback_query(F.data == "duration_unavailable")
async def duration_unavailable_handler(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–ª—É—á–∞—è –∫–æ–≥–¥–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–π –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    await callback.answer(
        "‚ùå –î–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–π –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.\n"
        "–ó–∞–≤–µ–¥–µ–Ω–∏–µ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –≤ 23:00. –í—ã–±–µ—Ä–∏—Ç–µ –±–æ–ª–µ–µ —Ä–∞–Ω–Ω–µ–µ –≤—Ä–µ–º—è.",
        show_alert=True
    )

@router.callback_query(F.data.startswith("duration_"), ReserveState.duration)
async def select_duration(callback: types.CallbackQuery, state: FSMContext):
    duration = int(callback.data.split("_")[1])
    data = await state.get_data()

    check = await make_api_request("GET", "/check", params={
        "date": data["date"],
        "time": data["time"],
        "duration": duration,
        "place": data["place"]  # –¥–æ–±–∞–≤–∏–ª–∏ place
    })


    if not check.get("free", 0):
        await callback.message.answer("–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å—Ç–æ–ª–∏–∫–æ–≤ –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å.")
        return

    await state.update_data(duration=duration)
    await callback.message.answer("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
    await state.set_state(ReserveState.name)

@router.message(ReserveState.name)
async def get_name(msg: types.Message, state: FSMContext):
    await state.update_data(name=msg.text)
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(ReserveState.phone)


@router.message(ReserveState.phone)
async def get_phone(msg: types.Message, state: FSMContext):
    # ‚úÖ –ó–ê–©–ò–¢–ê: –°—Ä–∞–∑—É –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
    user_data = await state.get_data()
    await state.clear()
    
    try:
        # –ü–∞—Ä—Å–∏–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        parsed_number = phonenumbers.parse(msg.text, None)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞
        if not phonenumbers.is_valid_number(parsed_number):
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
            
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        formatted_phone = phonenumbers.format_number(
            parsed_number,
            phonenumbers.PhoneNumberFormat.INTERNATIONAL
        )
        
        # ‚úÖ –ü–†–û–í–ï–†–ö–ê: –°—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –±—Ä–æ–Ω—å
        existing_check = await make_api_request("GET", "/get_reservations")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ user_id + date + time
        for reservation in existing_check.values() if isinstance(existing_check, dict) else []:
            if (str(reservation.get("user_id")) == str(msg.from_user.id) and
                reservation.get("date") == user_data.get("date") and
                reservation.get("time") == user_data.get("time") and
                not reservation.get("cancelled")):
                
                await msg.answer("‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –±—Ä–æ–Ω—å –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è!")
                return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ API
        result = await make_api_request(
            "POST",
            "/reserve",
            json={
                "place": user_data["place"],
                "name": user_data["name"],
                "phone": formatted_phone,
                "date": user_data["date"],
                "time": user_data["time"],
                "duration": user_data["duration"],
                "user_id": msg.from_user.id
            }
        )
        
        # ‚úÖ –£–í–ï–î–û–ú–õ–Ø–ï–ú –ê–î–ú–ò–ù–û–í:
        await notify_admin_new_booking(msg.bot, user_data)
        
        await msg.answer("‚úÖ –ë—Ä–æ–Ω—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n" \
                        "–ê –ø–æ–∫–∞ –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∞—à–∏–º –º–µ–Ω—é https://amelie-cafe.by/menu")
        
    except NumberParseException:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞
        await state.set_data(user_data)
        await state.set_state(ReserveState.phone)
        
        await msg.answer(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "+375 33 777 77 77 (–ë–µ–ª–∞—Ä—É—Å—å)\n"
            "+44 20 1234 5678 (–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è)\n"
            "+49 30 1234567 (–ì–µ—Ä–º–∞–Ω–∏—è)\n"
            "+7 912 345 67 89 (–†–æ—Å—Å–∏—è)\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –µ—â–µ —Ä–∞–∑:"
        )
        return
        
    except Exception as e:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞
        await state.set_data(user_data)
        await state.set_state(ReserveState.phone)
        
        await msg.answer(
            f"‚õî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –µ—â–µ —Ä–∞–∑:"
        )
        return




# –í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ user.py –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
PLACE_ADDRESSES = {
    "1": "–ü—Ä-—Ç –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π 85",
    "2": "–ü—Ä-—Ç –î–∑–µ—Ä–∂–∏–Ω—Å–∫–æ–≥–æ 9"
}

@router.message(F.text.lower().in_(["üìã –º–æ–∏ –±—Ä–æ–Ω–∏", "–º–æ–∏ –±—Ä–æ–Ω–∏"]))
async def my_reservations(msg: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_reservations = await get_user_reservations(msg.from_user.id)
        
        if not user_reservations:
            await msg.answer("–£ –≤–∞—Å –Ω–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.")
            return

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories = await categorize_reservations(user_reservations)
        
        active_count = len(categories['active'])
        pending_count = len(categories['pending'])
        past_count = len(categories['past'])
        total_count = len(user_reservations)

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        
        kb = InlineKeyboardBuilder()
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
        kb.button(
            text=f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ ({active_count})",
            callback_data="reservations_active"
        )
        kb.button(
            text=f"‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏ ({pending_count})",
            callback_data="reservations_pending"
        )
        kb.button(
            text=f"‚ùå –ü—Ä–æ—à–µ–¥—à–∏–µ ({past_count})",
            callback_data="reservations_past"
        )

        
        # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
        kb.adjust(1, 2)


        await msg.answer(
            "üìã <b>–í–∞—à–∏ –±—Ä–æ–Ω–∏</b>",
            parse_mode="HTML",
            reply_markup=kb.as_markup()
        )

    except Exception as e:
        await msg.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {str(e)}")


@router.callback_query(F.data.startswith("reservations_"))
async def handle_reservations_callback(callback: types.CallbackQuery):
    """–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö callback'–æ–≤ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏"""
    try:
        # –ï—Å–ª–∏ —ç—Ç–æ –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
        if callback.data == "reservations_back":
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_reservations = await get_user_reservations(callback.from_user.id)
            
            if not user_reservations:
                await callback.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.")
                return

            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            categories = await categorize_reservations(user_reservations)
            
            active_count = len(categories['active'])
            pending_count = len(categories['pending'])
            past_count = len(categories['past'])
            total_count = len(user_reservations)

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
            from aiogram.utils.keyboard import InlineKeyboardBuilder
            
            kb = InlineKeyboardBuilder()
            
            kb.button(
                text=f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ ({active_count})",
                callback_data="reservations_active"
            )
            kb.button(
                text=f"‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏ ({pending_count})",
                callback_data="reservations_pending"
            )
            kb.button(
                text=f"‚ùå –ü—Ä–æ—à–µ–¥—à–∏–µ ({past_count})",
                callback_data="reservations_past"
            )

            
            kb.adjust(1, 2)

            await callback.message.edit_text(
                "üìã <b>–í–∞—à–∏ –±—Ä–æ–Ω–∏</b>",
                parse_mode="HTML",
                reply_markup=kb.as_markup()
            )
            return
        
        # –ò–Ω–∞—á–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category = callback.data.replace("reservations_", "")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_reservations = await get_user_reservations(callback.from_user.id)
        
        if not user_reservations:
            await callback.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.")
            return

        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        categories = await categorize_reservations(user_reservations)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ–∫–∞–∑–∞—Ç—å
        if category == "active":
            reservations_to_show = categories['active']
            title = "‚úÖ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ</b>"
            empty_message = "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π."
        elif category == "pending":
            reservations_to_show = categories['pending']
            title = "‚è≥ <b>–í –æ–∂–∏–¥–∞–Ω–∏–∏</b>"
            empty_message = "–£ –≤–∞—Å –Ω–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –≤ –æ–∂–∏–¥–∞–Ω–∏–∏."
        elif category == "past":
            reservations_to_show = categories['past']
            title = "‚ùå <b>–ü—Ä–æ—à–µ–¥—à–∏–µ</b>"
            empty_message = "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ—à–µ–¥—à–∏—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π."


        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        if not reservations_to_show:
            response = f"{title}\n\n{empty_message}"
        else:
            response = f"{title}\n\n"
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            reservations_to_show.sort(key=lambda x: (x.get("date", ""), x.get("time", "")))
            
            for i, res in enumerate(reservations_to_show, 1):
                response += await format_reservation(res, i)
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏, –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π
                if i < len(reservations_to_show):
                    response += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        kb = InlineKeyboardBuilder()
        kb.button(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="reservations_back")
        
        
        kb.adjust(1)

        await callback.message.edit_text(
            response,
            parse_mode="HTML",
            reply_markup=kb.as_markup()
        )
        
    except Exception as e:
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π", show_alert=True)
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏: {str(e)}")


async def get_user_reservations(user_id: int) -> list:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        reservations_response = await make_api_request("GET", "/get_reservations")
        
        if isinstance(reservations_response, dict):
            reservations_list = list(reservations_response.values())
        elif isinstance(reservations_response, list):
            reservations_list = reservations_response
        else:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è—Ö")
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –±—Ä–æ–Ω–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_reservations = [
            res for res in reservations_list
            if isinstance(res, dict) and str(res.get("user_id")) == str(user_id)
        ]
        
        return user_reservations
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")
        return []


async def categorize_reservations(reservations: list) -> dict:
    """–†–∞–∑–¥–µ–ª—è–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    current_date = datetime.now().date()
    
    active_reservations = []      # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ
    pending_reservations = []     # –í –æ–∂–∏–¥–∞–Ω–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    past_reservations = []        # –ü—Ä–æ—à–µ–¥—à–∏–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ

    for res in reservations:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            reservation_date = datetime.strptime(res.get('date', ''), '%Y-%m-%d').date()
            is_past = reservation_date < current_date
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            is_cancelled = res.get("cancelled") or res.get("status") == "cancelled"
            is_confirmed = res.get("confirmed") or res.get("status") == "confirmed"
            
            if is_cancelled or is_past:
                past_reservations.append(res)
            elif is_confirmed:
                active_reservations.append(res)
            else:
                pending_reservations.append(res)
                
        except ValueError:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ø—Ä–æ—à–µ–¥—à–∏–µ
            past_reservations.append(res)

    return {
        'active': active_reservations,
        'pending': pending_reservations,
        'past': past_reservations
    }


async def format_reservation(res: dict, number: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
    import pytz
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –∏–∫–æ–Ω–∫—É
    if res.get("cancelled") or res.get("status") == "cancelled":
        status_icon = "‚ùå"
        status_text = "‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞"
    elif res.get("confirmed") or res.get("status") == "confirmed":
        status_icon = "‚úÖ"
        status_text = "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞"
    else:
        status_icon = "‚è≥"
        status_text = "‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏"
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –º–µ—Å—Ç–∞ –≤ –∞–¥—Ä–µ—Å
    raw_place = res.get('place', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    if str(raw_place) in PLACE_ADDRESSES:
        place = PLACE_ADDRESSES[str(raw_place)]
    else:
        place = raw_place if raw_place != '–ù–µ —É–∫–∞–∑–∞–Ω–æ' else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
    
    formatted = (
        f"{status_icon} <b>–ë—Ä–æ–Ω—å #{number}</b>\n"
        f"üë§ –ò–º—è: {res.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {res.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
        
        f"üè† –ú–µ—Å—Ç–æ: {place}\n"
        f"üìÖ –î–∞—Ç–∞: {res.get('date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        f"‚è∞ –í—Ä–µ–º—è: {res.get('time', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {res.get('duration', 1)} —á\n\n"
        
        f"üìå –°—Ç–∞—Ç—É—Å: {status_text}"
    )
    
    # –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞
    moscow_tz = pytz.timezone('Europe/Moscow')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–∑–∞–∫–∞–∑–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    if res.get("preorder"):
        formatted += f"\nüçΩ –ü—Ä–µ–¥–∑–∞–∫–∞–∑: –û—Ç–º–µ—á–µ–Ω"
        if res.get("preorder_at"):
            try:
                # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ú–°–ö
                preorder_utc = datetime.fromisoformat(res["preorder_at"].replace('Z', '+00:00'))
                if preorder_utc.tzinfo is None:
                    # –ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–æ–Ω–µ, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ UTC
                    preorder_utc = preorder_utc.replace(tzinfo=pytz.UTC)
                preorder_moscow = preorder_utc.astimezone(moscow_tz)
                formatted += f" ({preorder_moscow.strftime('%d.%m.%Y %H:%M')})"
            except:
                pass
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞—Ç–∞—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    if res.get("cancelled_at"):
        try:
            # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –æ—Ç–º–µ–Ω—ã –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ú–°–ö
            cancelled_utc = datetime.fromisoformat(res["cancelled_at"].replace('Z', '+00:00'))
            if cancelled_utc.tzinfo is None:
                cancelled_utc = cancelled_utc.replace(tzinfo=pytz.UTC)
            cancelled_moscow = cancelled_utc.astimezone(moscow_tz)
            formatted += f"\nüïë –û—Ç–º–µ–Ω–µ–Ω–∞: {cancelled_moscow.strftime('%d.%m.%Y –≤ %H:%M')} "
        except Exception as e:
            print(f"DEBUG: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ cancelled_at: {e}")
            pass
    elif res.get("confirmed_at"):
        try:
            # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ú–°–ö
            confirmed_utc = datetime.fromisoformat(res["confirmed_at"].replace('Z', '+00:00'))
            if confirmed_utc.tzinfo is None:
                confirmed_utc = confirmed_utc.replace(tzinfo=pytz.UTC)
            confirmed_moscow = confirmed_utc.astimezone(moscow_tz)
            formatted += f"\nüïë –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞: {confirmed_moscow.strftime('%d.%m.%Y –≤ %H:%M')} "
        except Exception as e:
            print(f"DEBUG: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ confirmed_at: {e}")
            pass
    
    formatted += "\n\n"
    return formatted


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –±—Ä–æ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
# @router.message(F.text.lower().in_(["üö´ –æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å", "–æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å"]))
# async def cancel_my_reservation(msg: types.Message):
#     try:
#         # –ü–æ–ª—É—á–∞–µ–º –±—Ä–æ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#         reservations_response = await make_api_request("GET", "/get_reservations")
        
#         if isinstance(reservations_response, dict):
#             reservations_list = list(reservations_response.values())
#         elif isinstance(reservations_response, list):
#             reservations_list = reservations_response
#         else:
#             raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è—Ö")
        
#         # –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–µ –±—Ä–æ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∏ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ)
#         user_active_reservations = [
#             res for res in reservations_list
#             if (isinstance(res, dict) and 
#                 str(res.get("user_id")) == str(msg.from_user.id) and
#                 not res.get("cancelled") and
#                 res.get("status") != "cancelled")
#         ]

#         if not user_active_reservations:
#             await msg.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
#             return

#         # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
#         user_active_reservations.sort(key=lambda x: (x.get("date", ""), x.get("time", "")))

#         response = "üö´ <b>–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–æ–Ω—å –¥–ª—è –æ—Ç–º–µ–Ω—ã:</b>\n\n"
        
#         kb = InlineKeyboardBuilder()
        
#         for i, res in enumerate(user_active_reservations, 1):
#             date = res.get('date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
#             time = res.get('time', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
#             place = res.get('place', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            
#             # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–µ—Å—Ç–æ
#             if str(place) in PLACE_ADDRESSES:
#                 place = PLACE_ADDRESSES[str(place)]
            
#             status = "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞" if res.get("confirmed") else "‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏"
            
#             response += (
#                 f"<b>{i}.</b> {date} –≤ {time}\n"
#                 f"üìç {place}\n"
#                 f"üìå {status}\n\n"
#             )
            
#             # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–º–µ–Ω—ã
#             kb.button(
#                 text=f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å #{i}",
#                 callback_data=f"user_cancel_{res['user_id']}_{res['date']}_{res['time']}"
#             )
        
#         kb.adjust(1)  # –ü–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥
        
#         await msg.answer(response, parse_mode="HTML", reply_markup=kb.as_markup())

#     except Exception as e:
#         await msg.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∞—à–∏—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π")
#         print(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {str(e)}")

# @router.callback_query(F.data.startswith("user_cancel_"))
# async def process_user_cancellation(callback: types.CallbackQuery):
#     try:
#         _, _, uid, date, time = callback.data.split("_")
        
#         # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω—è–µ—Ç —Å–≤–æ—é –±—Ä–æ–Ω—å
#         if str(callback.from_user.id) != uid:
#             await callback.answer("‚ùå –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –±—Ä–æ–Ω–∏", show_alert=True)
#             return
        
#         # –û—Ç–º–µ–Ω—è–µ–º –±—Ä–æ–Ω—å —á–µ—Ä–µ–∑ API
#         async with httpx.AsyncClient() as client:
#             response = await client.post(
#                 f"{API_URL}/cancel_reservation",
#                 params={
#                     "user_id": uid,
#                     "date": date,
#                     "time": time,
#                     "cancelled_at": datetime.now().isoformat()
#                 }
#             )
            
#             if response.status_code == 200:
#                 result = response.json()
#                 if "error" not in result:
#                     await callback.message.answer("‚úÖ –í–∞—à–∞ –±—Ä–æ–Ω—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞")
#                     await callback.message.edit_reply_markup(reply_markup=None)
#                 else:
#                     await callback.answer(f"‚ùå {result['error']}", show_alert=True)
#             else:
#                 await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –±—Ä–æ–Ω–∏", show_alert=True)
    
#     except Exception as e:
#         await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
#         print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {e}")




@router.message(F.text.lower().in_(["‚ùì –ø–æ–º–æ—â—å", "–ø–æ–º–æ—â—å"]))
async def help_command(msg: types.Message):
    await msg.answer(
        "–ù–∞–ø–∏—à–∏—Ç–µ \"üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å\", —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Å—Ç–æ–ª–∏–∫.\n"
        "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –≤–∞—à—É –±—Ä–æ–Ω—å –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç."
    )
