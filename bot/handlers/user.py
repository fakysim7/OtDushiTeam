#bot/hundlers/user.py
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.filters import CommandStart
from aiogram.fsm.state import StatesGroup, State
import httpx
from config import API_URL
from datetime import datetime
from keyboards.main import main_menu
from russian_calendar import RussianCalendar, CalendarCallback
from keyboards.inline import duration_kb, dynamic_hours_kb, place_kb
from typing import Optional, Dict
import phonenumbers
from phonenumbers.phonenumberutil import NumberParseException

router = Router()


PLACE_ADDRESSES = {
    "1": "–ü—Ä-—Ç –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π 85",
    "2": "–ü—Ä-—Ç –î–∑–µ—Ä–∂–∏–Ω—Å–∫–æ–≥–æ 9"
}

class ReserveState(StatesGroup):
    place = State()
    date = State()
    time = State()
    duration = State()
    name = State()
    phone = State()

async def make_api_request(
    method: str,
    endpoint: str,
    params: Optional[Dict] = None,
    json: Optional[Dict] = None
) -> Dict:
    async with httpx.AsyncClient() as client:
        response = await client.request(
            method,
            f"{API_URL}{endpoint}",
            params=params,
            json=json
        )
        return response.json()

@router.message(CommandStart())
async def start(msg: types.Message):
    await msg.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–∏–∫–æ–≤!\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=main_menu()
    )

@router.message(F.text.lower().in_(["üìÖ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", "–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å"]))
async def start_reserve(msg: types.Message, state: FSMContext):
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ:", reply_markup=place_kb())
    await state.set_state(ReserveState.place)

@router.callback_query(F.data.startswith("place_"), ReserveState.place)
async def select_place(callback: types.CallbackQuery, state: FSMContext):
    place = callback.data.replace("place_", "")
    await state.update_data(place=place)
    await callback.message.answer(
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=await RussianCalendar().start_calendar()
    )
    await state.set_state(ReserveState.date)


# @router.callback_query(calendar_cb.filter(), ReserveState.date)
# async def process_date(callback_query: types.CallbackQuery, callback_data: dict, state: FSMContext):
#     selected, selected_date = await RussianCalendar().process_selection(callback_query, callback_data)
    
#     if not selected:
#         return

#     if selected_date.date() < datetime.now().date():
#         await callback_query.message.answer("–í—ã–±—Ä–∞–Ω–∞ –ø—Ä–æ—à–µ–¥—à–∞—è –¥–∞—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.")
#         return

#     await state.update_data(date=selected_date.strftime("%Y-%m-%d"))
#     await callback_query.message.answer(
#         f"–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {selected_date.strftime('%d.%m.%Y')}\n–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:",
#         reply_markup=dynamic_hours_kb()
#     )
#     await state.set_state(ReserveState.time)

@router.callback_query(CalendarCallback.filter(), ReserveState.date)
async def process_date(callback_query: types.CallbackQuery, callback_data: CalendarCallback, state: FSMContext):
    selected, selected_date = await RussianCalendar().process_selection(callback_query, callback_data)

    if not selected:
        # –ù–∞–∂–∞—Ç–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π –¥–µ–Ω—å ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º (alert —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ)
        return

    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å–Ω–æ–≤–∞ –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É ‚Äî –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å–∞–º –±–ª–æ–∫–∏—Ä—É–µ—Ç –∏—Ö –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç alert

    await state.update_data(date=selected_date.strftime("%Y-%m-%d"))
    await callback_query.message.answer(
        f"–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {selected_date.strftime('%d.%m.%Y')}\n–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:",
        reply_markup=dynamic_hours_kb()
    )
    await state.set_state(ReserveState.time)

@router.callback_query(F.data == "ignore", ReserveState.date)
async def ignore_past_date(callback: types.CallbackQuery):
    await callback.answer(
        "–ù–µ–ª—å–∑—è –≤—ã–±–∏—Ä–∞—Ç—å –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å.",
        show_alert=False  # –≠—Ç–æ toast!
    )
    
@router.callback_query(F.data.startswith("time_"), ReserveState.time)
async def select_time(callback: types.CallbackQuery, state: FSMContext):
    time = callback.data.split("_")[1]
    await state.update_data(time=time)
    await callback.message.answer("‚è± –£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–≤ —á–∞—Å–∞—Ö):", reply_markup=duration_kb())
    await state.set_state(ReserveState.duration)

@router.callback_query(F.data.startswith("duration_"), ReserveState.duration)
async def select_duration(callback: types.CallbackQuery, state: FSMContext):
    duration = int(callback.data.split("_")[1])
    data = await state.get_data()

    check = await make_api_request("GET", "/check", params={
        "date": data["date"],
        "time": data["time"],
        "duration": duration,
        "place": data["place"]  # –¥–æ–±–∞–≤–∏–ª–∏ place
    })


    if not check.get("free", 0):
        await callback.message.answer("–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å—Ç–æ–ª–∏–∫–æ–≤ –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å.")
        return

    await state.update_data(duration=duration)
    await callback.message.answer("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
    await state.set_state(ReserveState.name)

@router.message(ReserveState.name)
async def get_name(msg: types.Message, state: FSMContext):
    await state.update_data(name=msg.text)
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(ReserveState.phone)


@router.message(ReserveState.phone)
async def get_phone(msg: types.Message, state: FSMContext):
    try:
        # –ü–∞—Ä—Å–∏–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        parsed_number = phonenumbers.parse(msg.text, None)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞
        if not phonenumbers.is_valid_number(parsed_number):
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
            
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        formatted_phone = phonenumbers.format_number(
            parsed_number,
            phonenumbers.PhoneNumberFormat.INTERNATIONAL
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        user_data = await state.get_data()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ API
        await make_api_request(
            "POST",
            "/reserve",
            json={
                "place": user_data["place"],
                "name": user_data["name"],
                "phone": formatted_phone,
                "date": user_data["date"],
                "time": user_data["time"],
                "duration": user_data["duration"],
                "user_id": msg.from_user.id
            }
        )
        
        await msg.answer("‚úÖ –ë—Ä–æ–Ω—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n" \
                        "–ê –ø–æ–∫–∞ –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∞—à–∏ –º–µ–Ω—é https://amelie-cafe.by/menu")
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
        
    except NumberParseException:
        await msg.answer(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "+375 33 777 77 77 (–ë–µ–ª–∞—Ä—É—Å—å)\n"
            "+44 20 1234 5678 (–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è)\n"
            "+49 30 1234567 (–ì–µ—Ä–º–∞–Ω–∏—è)\n"
            "+7 912 345 67 89 (–†–æ—Å—Å–∏—è)\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –µ—â–µ —Ä–∞–∑:"
        )
        # –ù–µ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥
        return
        
    except Exception as e:
        await msg.answer(
            f"‚õî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –µ—â–µ —Ä–∞–∑:"
        )
        # –ù–µ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–∫–∞—Ö
        return




# –í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ user.py –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
PLACE_ADDRESSES = {
    "1": "–ü—Ä-—Ç –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π 85",
    "2": "–ü—Ä-—Ç –î–∑–µ—Ä–∂–∏–Ω—Å–∫–æ–≥–æ 9"
}

@router.message(F.text.lower().in_(["üìã –º–æ–∏ –±—Ä–æ–Ω–∏", "–º–æ–∏ –±—Ä–æ–Ω–∏"]))
async def my_reservations(msg: types.Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        reservations_response = await make_api_request("GET", "/get_reservations")
        
        if isinstance(reservations_response, dict):
            reservations_list = list(reservations_response.values())
        elif isinstance(reservations_response, list):
            reservations_list = reservations_response
        else:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è—Ö")
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –±—Ä–æ–Ω–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_reservations = [
            res for res in reservations_list
            if isinstance(res, dict) and str(res.get("user_id")) == str(msg.from_user.id)
        ]

        if not user_reservations:
            await msg.answer("–£ –≤–∞—Å –Ω–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.")
            return

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –∏ –≤—Ä–µ–º–µ–Ω–∏
        user_reservations.sort(key=lambda x: (x.get("date", ""), x.get("time", "")))

        response = "üìã <b>–í–∞—à–∏ –±—Ä–æ–Ω–∏:</b>\n\n"
        
        for i, res in enumerate(user_reservations, 1):
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±—Ä–æ–Ω–∏
            if res.get("cancelled") or res.get("status") == "cancelled":
                status = "‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞"
                status_icon = "‚ùå"
            elif res.get("confirmed") or res.get("status") == "confirmed":
                status = "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞"
                status_icon = "‚úÖ"
            else:
                status = "‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏"
                status_icon = "‚è≥"
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –º–µ—Å—Ç–∞ –≤ –∞–¥—Ä–µ—Å
            raw_place = res.get('place', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            if str(raw_place) in PLACE_ADDRESSES:
                place = PLACE_ADDRESSES[str(raw_place)]
            else:
                place = raw_place if raw_place != '–ù–µ —É–∫–∞–∑–∞–Ω–æ' else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
            
            response += (
                f"{status_icon} <b>–ë—Ä–æ–Ω—å #{i}</b>\n"
                f"üë§ –ò–º—è: {res.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                f"üè† –ú–µ—Å—Ç–æ: {place}\n"
                f"üìÖ –î–∞—Ç–∞: {res.get('date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
                f"‚è∞ –í—Ä–µ–º—è: {res.get('time', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {res.get('duration', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')} —á\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {res.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                f"üìå –°—Ç–∞—Ç—É—Å: {status}\n"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞—Ç–µ –æ—Ç–º–µ–Ω—ã –µ—Å–ª–∏ –µ—Å—Ç—å
            if res.get("cancelled_at"):
                try:
                    cancelled_date = datetime.fromisoformat(res["cancelled_at"])
                    response += f"üïí –û—Ç–º–µ–Ω–µ–Ω–∞: {cancelled_date.strftime('%d.%m.%Y %H:%M')}\n"
                except:
                    pass
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
            elif res.get("confirmed_at"):
                try:
                    confirmed_date = datetime.fromisoformat(res["confirmed_at"])
                    response += f"üïí –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞: {confirmed_date.strftime('%d.%m.%Y %H:%M')}\n"
                except:
                    pass
            
            response += "\n"
        
        await msg.answer(response, parse_mode="HTML")

    except Exception as e:
        await msg.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {str(e)}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –±—Ä–æ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
# @router.message(F.text.lower().in_(["üö´ –æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å", "–æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å"]))
# async def cancel_my_reservation(msg: types.Message):
#     try:
#         # –ü–æ–ª—É—á–∞–µ–º –±—Ä–æ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#         reservations_response = await make_api_request("GET", "/get_reservations")
        
#         if isinstance(reservations_response, dict):
#             reservations_list = list(reservations_response.values())
#         elif isinstance(reservations_response, list):
#             reservations_list = reservations_response
#         else:
#             raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è—Ö")
        
#         # –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–µ –±—Ä–æ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∏ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ)
#         user_active_reservations = [
#             res for res in reservations_list
#             if (isinstance(res, dict) and 
#                 str(res.get("user_id")) == str(msg.from_user.id) and
#                 not res.get("cancelled") and
#                 res.get("status") != "cancelled")
#         ]

#         if not user_active_reservations:
#             await msg.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
#             return

#         # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
#         user_active_reservations.sort(key=lambda x: (x.get("date", ""), x.get("time", "")))

#         response = "üö´ <b>–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–æ–Ω—å –¥–ª—è –æ—Ç–º–µ–Ω—ã:</b>\n\n"
        
#         kb = InlineKeyboardBuilder()
        
#         for i, res in enumerate(user_active_reservations, 1):
#             date = res.get('date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
#             time = res.get('time', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
#             place = res.get('place', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            
#             # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–µ—Å—Ç–æ
#             if str(place) in PLACE_ADDRESSES:
#                 place = PLACE_ADDRESSES[str(place)]
            
#             status = "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞" if res.get("confirmed") else "‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏"
            
#             response += (
#                 f"<b>{i}.</b> {date} –≤ {time}\n"
#                 f"üìç {place}\n"
#                 f"üìå {status}\n\n"
#             )
            
#             # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–º–µ–Ω—ã
#             kb.button(
#                 text=f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å #{i}",
#                 callback_data=f"user_cancel_{res['user_id']}_{res['date']}_{res['time']}"
#             )
        
#         kb.adjust(1)  # –ü–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥
        
#         await msg.answer(response, parse_mode="HTML", reply_markup=kb.as_markup())

#     except Exception as e:
#         await msg.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∞—à–∏—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π")
#         print(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {str(e)}")

# @router.callback_query(F.data.startswith("user_cancel_"))
# async def process_user_cancellation(callback: types.CallbackQuery):
#     try:
#         _, _, uid, date, time = callback.data.split("_")
        
#         # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω—è–µ—Ç —Å–≤–æ—é –±—Ä–æ–Ω—å
#         if str(callback.from_user.id) != uid:
#             await callback.answer("‚ùå –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –±—Ä–æ–Ω–∏", show_alert=True)
#             return
        
#         # –û—Ç–º–µ–Ω—è–µ–º –±—Ä–æ–Ω—å —á–µ—Ä–µ–∑ API
#         async with httpx.AsyncClient() as client:
#             response = await client.post(
#                 f"{API_URL}/cancel_reservation",
#                 params={
#                     "user_id": uid,
#                     "date": date,
#                     "time": time,
#                     "cancelled_at": datetime.now().isoformat()
#                 }
#             )
            
#             if response.status_code == 200:
#                 result = response.json()
#                 if "error" not in result:
#                     await callback.message.answer("‚úÖ –í–∞—à–∞ –±—Ä–æ–Ω—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞")
#                     await callback.message.edit_reply_markup(reply_markup=None)
#                 else:
#                     await callback.answer(f"‚ùå {result['error']}", show_alert=True)
#             else:
#                 await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –±—Ä–æ–Ω–∏", show_alert=True)
    
#     except Exception as e:
#         await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
#         print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {e}")




@router.message(F.text.lower().in_(["‚ùì –ø–æ–º–æ—â—å", "–ø–æ–º–æ—â—å"]))
async def help_command(msg: types.Message):
    await msg.answer(
        "–ù–∞–ø–∏—à–∏—Ç–µ \"üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å\", —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Å—Ç–æ–ª–∏–∫.\n"
        "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –≤–∞—à—É –±—Ä–æ–Ω—å –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç."
    )
