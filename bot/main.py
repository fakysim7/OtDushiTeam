# bot/main.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è –¥–ª—è Railway
import asyncio
import os
from aiogram import Bot, Dispatcher
from config import BOT_TOKEN
from handlers import user, admin
from aiogram.fsm.storage.redis import RedisStorage
from redis.asyncio import Redis

async def main():
    if not BOT_TOKEN:
        print("ERROR: BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
        
    bot = Bot(token=BOT_TOKEN)
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º REDIS_URL –æ—Ç Railway
    redis_url = os.getenv('REDIS_URL')
    
    if redis_url:
        print(f"Connecting to Redis via URL: {redis_url}")
        redis = Redis.from_url(redis_url)
    else:
        # Fallback –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        print("REDIS_URL not found, using localhost")
        redis = Redis(host='localhost', port=6379)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
        await redis.ping()
        print("‚úÖ Redis connection successful!")
        
        dp = Dispatcher(storage=RedisStorage(redis))
        dp.include_routers(user.router, admin.router)
        
        print("üöÄ Bot starting...")
        await dp.start_polling(bot)
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        # –ï—Å–ª–∏ Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º MemoryStorage
        print("‚ö†Ô∏è Falling back to MemoryStorage")
        from aiogram.fsm.storage.memory import MemoryStorage
        
        dp = Dispatcher(storage=MemoryStorage())
        dp.include_routers(user.router, admin.router)
        await dp.start_polling(
            bot, 
            polling_timeout=30,  
            request_timeout=30
        )

if __name__ == "__main__":
    asyncio.run(main())


