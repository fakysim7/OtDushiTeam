from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime, timedelta


def time_slots_kb():
    kb = InlineKeyboardMarkup(inline_keyboard=[])
    
    # –î–æ–±–∞–≤—å—Ç–µ –∫–Ω–æ–ø–∫–∏ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏
    times = ["10:00", "12:00", "14:00", "16:00", "18:00", "20:00"]
    buttons = [
        InlineKeyboardButton(text=time, callback_data=f"time_{time}")
        for time in times
    ]
    
    kb.inline_keyboard = [buttons[i:i+3] for i in range(0, len(buttons), 3)]
    return kb

def confirm_button():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ", callback_data="confirmed")]
    ])


def dynamic_hours_kb(selected_date: str = None) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏, —É—á–∏—Ç—ã–≤–∞—è –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
    """
    from datetime import datetime, timedelta
    import pytz
    
    builder = InlineKeyboardBuilder()
    
    # –ü–æ–ª—É—á–∞–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
    moscow_tz = pytz.timezone('Europe/Moscow')
    now_moscow = datetime.now(moscow_tz)
    current_date_moscow = now_moscow.date()
    
    print(f"DEBUG: –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è: {now_moscow.strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"DEBUG: selected_date = {selected_date}")
    print(f"DEBUG: current_date_moscow = {current_date_moscow}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –ø–æ –ú–°–ö
    is_today = False
    if selected_date:
        try:
            selected_date_obj = datetime.strptime(selected_date, '%Y-%m-%d').date()
            is_today = selected_date_obj == current_date_moscow
            print(f"DEBUG: selected_date_obj = {selected_date_obj}")
            print(f"DEBUG: is_today = {is_today}")
        except ValueError:
            print(f"DEBUG: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã: {selected_date}")
            is_today = False
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è
    min_hour = 10  # –í—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∑–∞–≤–µ–¥–µ–Ω–∏—è
    
    if is_today:
        # –î–æ–±–∞–≤–ª—è–µ–º –±—É—Ñ–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è (1 —á–∞—Å)
        buffer_minutes = 60
        min_datetime_moscow = now_moscow + timedelta(minutes=buffer_minutes)
        min_hour = min_datetime_moscow.hour
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –º–∏–Ω—É—Ç—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —á–∞—Å—É
        if min_datetime_moscow.minute > 0:
            min_hour += 1
            
        # –ù–æ –Ω–µ —Ä–∞–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è
        min_hour = max(min_hour, 10)
        
        print(f"DEBUG: –°–µ–≥–æ–¥–Ω—è {current_date_moscow}, —Å–µ–π—á–∞—Å {now_moscow.time()} –ú–°–ö")
        print(f"DEBUG: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —á–∞—Å —Å –±—É—Ñ–µ—Ä–æ–º: {min_hour}")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Å—ã (–¥–æ 22:00, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –º–∏–Ω–∏–º—É–º 1 —á–∞—Å –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –≤ 23:00)
    available_hours = []
    for hour in range(min_hour, 23):  # –î–æ 22:00 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ
        available_hours.append(f"{hour:02d}:00")
    
    print(f"DEBUG: –î–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Å—ã: {available_hours}")
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Å–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    if is_today and not available_hours:
        builder.button(
            text="‚ùå –ù–∞ —Å–µ–≥–æ–¥–Ω—è –≤—Ä–µ–º—è –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å", 
            callback_data="time_unavailable"
        )
        print(f"DEBUG: –ù–∞ —Å–µ–≥–æ–¥–Ω—è –≤—Ä–µ–º—è –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å")
    else:
        for time_slot in available_hours:
            builder.button(text=time_slot, callback_data=f"time_{time_slot}")
        
        builder.adjust(4)  # 4 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    
    return builder.as_markup()



def duration_kb(selected_time: str = None) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é, —É—á–∏—Ç—ã–≤–∞—è –≤—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è (23:00)
    
    Args:
        selected_time: –í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM
    """
    from datetime import datetime, timedelta
    
    builder = InlineKeyboardBuilder()
    
    # –í—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è –∑–∞–≤–µ–¥–µ–Ω–∏—è
    CLOSING_TIME = 23  # 23:00
    
    max_duration = 3  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    if selected_time:
        try:
            # –ü–∞—Ä—Å–∏–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
            start_time = datetime.strptime(selected_time, "%H:%M")
            start_hour = start_time.hour
            
            # –í—ã—á–∏—Å–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
            max_duration = min(3, CLOSING_TIME - start_hour)
            
            print(f"DEBUG: –í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {selected_time}")
            print(f"DEBUG: –ù–∞—á–∞–ª—å–Ω—ã–π —á–∞—Å: {start_hour}")
            print(f"DEBUG: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {max_duration}")
            
        except ValueError:
            print(f"DEBUG: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏: {selected_time}")
            max_duration = 3
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω–æ–π –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if max_duration <= 0:
        builder.button(
            text="‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏", 
            callback_data="duration_unavailable"
        )
        print(f"DEBUG: –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")
    else:
        for dur in range(1, max_duration + 1):
            builder.button(text=f"{dur} —á", callback_data=f"duration_{dur}")
        
        builder.adjust(3)
    
    return builder.as_markup()


def place_kb() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="üìç –ó–∞–≤–µ–¥–µ–Ω–∏–µ 1 (–ü—Ä-—Ç –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π 85)", callback_data="place_1")
    builder.button(text="üìç –ó–∞–≤–µ–¥–µ–Ω–∏–µ 2 (–ü—Ä-—Ç –î–∑–µ—Ä–∂–∏–Ω—Å–∫–æ–≥–æ 9)", callback_data="place_2")
    builder.adjust(1)  # –ü–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫–µ
    return builder.as_markup()
